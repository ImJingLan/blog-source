<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 景蓝の小屋</title>
    <link>https://blog.yurik.cafe/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 景蓝の小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.yurik.cafe/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Vercel托管静态网页</title>
      <link>https://blog.yurik.cafe/p/use-vercel-introduction/</link>
      <pubDate>Mon, 23 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/use-vercel-introduction/</guid>
      <description>前言 Vercel 是一个前端页面托管服务网站，用户可以在上面托管部署多个前端框架的项目
当然，Vercel 也可以直接托管 Html 静态站点，并且 Vercel 的访问速度优于 Github Pages
写这篇文章的想法来源于两个，一是之前发布的 Hugo 博客部署有一半烂尾了（懒.jpg）, 还有一点就是 Norphin 的博客在他自己自定义后使用了一张 3.04Mb 左右的背景图片，由于他使用 frp 服务+香港节点建站，使得整张图片我加载了大约 10s。于是决定教教他怎么使用 vercel 来规避一些流量损耗。
BTW: 他的背景图是 4K 的，其实一般来说 1080p 到 2k 就差不多了，不必要上传那么大的图片的说&amp;hellip;
注册 Vercel Vercel 的注册过程很简单，你可以直接使用自己的 GitHub、GitLab、BitBucket 账户直接登录，在本文中就不再过多赘述
使用 Vercel 首先在 Github 或者 GitLab 账户（下文简称你的账户）中新建一个 Git 仓库，随后将自己的静态文件 Git 提交至仓库内
接着在 Vercel 中点击 Add New..，或者访问这个网址。连接你的你的账户，选择先前新建的仓库，点击 Import
设置你的Project Name, 如果你单纯的想要托管 Html 文档和静态资源的话 框架预设(Framework Preset)就选 Other 就好了
点击 部署(Deploy) 后稍等片刻, 你的项目就部署完成
绑定自定义域名 Vercel 会在部署项目时提供一个 .</description>
    </item>
    
    <item>
      <title>树莓派4B烧录CentOS镜像并安装宝塔面板</title>
      <link>https://blog.yurik.cafe/p/raspberry-pi-os-install/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/raspberry-pi-os-install/</guid>
      <description>前言 很古早的时候我买了一台 树莓派 4B 4GB 版本（怀念当时 4GB 版本 500 块的日子）
由于 Cortex-A72 处理器，树莓派 4B 的性能其实很薄弱，当时我也只是勉强用它跑一跑 QQ 机器人和网站服务器。（宝塔跑 Mariadb 安装 CPU 占用率都能 100%）随后用旧电脑刷服务器后树莓派就闲置了。
最近有朋友想尝试在家里搭建个人网站，我就把树莓派借给了他，但是尝试了很多个 Linux 发行版（Debian、Ubuntu）后宝塔+LNMP 环境还是无法安装成功，不是宝塔无法运行就是 Mysql 无法安装。
在查阅了互联网资料后，发现我用的最多的 Centos 也存在 Arm 版本，在使用这个发行版后安装宝塔和 LNMP 环境也变得顺利了，于是打算写一篇博客记录一下安装过程
准备工作 需要准备：
一台接入内网树莓派 4B 至少 16GB 的内存卡 + 读卡器 (USB3.0 最佳) 一台电脑 系统镜像 Raspberry Pi Imager (可前往 https://www.raspberrypi.com/software/ 下载) 烧录镜像 其实 CentOS 7 为树莓派提供了专门的系统镜像，在CentOS - Download中给 Arm 架构的处理器提供了 ARM64(aarch64) 和 ARM32(armhfp) ，因为我的树莓派 4B 是 4GB 版本的，所以就选择了 ARM64 的版本</description>
    </item>
    
    <item>
      <title>在Linux上搭建MC服务器（一）</title>
      <link>https://blog.yurik.cafe/p/minecraft-server-on-linux-1/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/minecraft-server-on-linux-1/</guid>
      <description>接上文
自从有了一台独立服务器后，可以玩的东西就多了
于是决定开一个我的世界 Java 服务器
写一篇文章记录一下
安装运行环境 Minecraft Java 版的服务器运行环境非常单纯，只需要一个 Java 就行
由于我想开一个 1.16.5 的服务器，所以 Java 版本选择了 Java 17
安装过程参考的这篇文章《Linux 安装 Java 17 - ChaosMoor》
下载服务端 Minecraft 服务端有很多种，例如原版香草端(Vanilla)、Paper、Bukkit 等
由于我希望保留原版的红石特性，所以选择了原版服务端
对于最新版本的 Minecraft 服务器，可以前往Minecraft.net下载 jar 文件
如果你想获取特定版本的服务端文件，可以访问Minecraft Wiki搜索对应版本页面
▲ Wiki 界面
Download(下载) -&amp;gt; Server(服务端)下载服务端
注意，不开玩笑！：千万不要误点括号后的(.json)文件，或错选 Obfuscation maps(混淆映射表)中的 Server(服务器)选项
运行服务器 进入终端
在服务器上新建一个文件夹存放服务端文件
mkdir &amp;lt;文件夹名称&amp;gt;
进入文件夹
cd &amp;lt;刚才的文件夹名称&amp;gt;
将下载好的服务端文件上传至该文件夹
▲ 使用 WinSCP 上传
我在这里将服务端命名为 server.jar
修改文件权限
chmod 744 &amp;lt;服务端文件名&amp;gt;.jar
然后运行服务器！
java -Xmx1024M -Xms1024M -jar &amp;lt;服务端文件名&amp;gt;.</description>
    </item>
    
    <item>
      <title>获取B站视频封面</title>
      <link>https://blog.yurik.cafe/p/get-bilibili-album/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/get-bilibili-album/</guid>
      <description>前言 最近重装了电脑，然后电脑上整理的 iTunes 资料库全没了。草
在整理的时候发现有一些歌曲是直接从 B 站上下载下来的，专辑封面也是从 B 站封面扒的，全没了（呜呜呜
虽然在 Bing 上一搜就有很多封面提取的网站
但是秉承着用轮子不如造轮子的理论(其实就是闲着没事)，我决定自己用 Python 写一个提取封面的工具
准备工作 既然是造轮子，那当然要先看 B 站的 API
搜了一下，发现网上公认的哔哩哔哩官方 API 文档地址是：http://docs.bilibili.cn/wiki
但是
在 Github 上面找到的野生文档 SocialSisterYi/bilibili-API-collect
API
获取视频信息
https://api.bilibili.com/x/web-interface/view?bvid=BV号
丢**json.cn**解析一下
{ &amp;#34;code&amp;#34;:0, &amp;#34;message&amp;#34;:&amp;#34;0&amp;#34;, &amp;#34;ttl&amp;#34;:1, &amp;#34;data&amp;#34;:{ &amp;#34;bvid&amp;#34;:&amp;#34;BV1d54y1n7NX&amp;#34;, &amp;#34;aid&amp;#34;:846717078, &amp;#34;videos&amp;#34;:1, &amp;#34;tid&amp;#34;:28, &amp;#34;tname&amp;#34;:&amp;#34;原创音乐&amp;#34;, &amp;#34;copyright&amp;#34;:1, &amp;#34;pic&amp;#34;:&amp;#34;http://i0.</description>
    </item>
    
    <item>
      <title>戴尔 PowerEdge R720 上手 : 年轻人的第一台家庭服务器</title>
      <link>https://blog.yurik.cafe/p/dell-poweredge-r720-review/</link>
      <pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/dell-poweredge-r720-review/</guid>
      <description>假期咯，是时候折腾一些新玩意啦！
假期开始的时候在一个同学家玩（下面叫他叫兽），突然有一天他说：“再过几周我想和你研究一下怎么写网页（HTML），顺便学学怎么搭建服务器。”
“服务器嘛，你自己用一台电脑开就好了。”
但我真的想要一台服务器啊 QwQ
回到家我越想越睡不着，越想越睡不着
于是我
开箱 U1S1，这玩意是真的沉。顺丰小哥推着一个推车帮我推上来的，辛苦了 Orz
顺丰小哥：你买了什么啊，这么沉？
商家发的真的结实，除了泡沫外顶上还有一层防摔垫
（由于没有图，就不放了 QWQ，大家看看上面的说说吧
iDRAC YYDS？ 得益于戴尔强大的 iDRAC 助力，使安装系统变成了一件 极其容易 的事
—— 景蓝 Yurik
这是我问云资后得出的初结论
真的吗？
这件事可能对于一台新的 Dell 服务器来说，易如反掌，但对于这样一台二手服务器，却花费了我和云资一个下午
首先，服务器需要在原先网口的基础上再连接 iDRAC 的网口（也就是两根网线）
我的解决方案是 PDD 58 元的 水星 5 口全千兆交换机
一开始，iDrac 的默认地址一直无法连接(https)
重置之后 Edge 浏览器便提示
使用不受支持的协议
ERR_SSL_VERSION_OR_CIPHER_MISMATCH
无论是 Chrome Firefox 还是 Edge 即使进入 Windows 设置支持 SSL 3.0 后仍于事无补
最后解决方案是使用 Edge 的 IE 模式访问（没想到 IE 还是蛮有用的）
点亮 既然进入的 iDRAC，我们就启动虚拟控制台吧
点击 虚拟介质-&amp;gt;连接虚拟介质
等待连接后点 虚拟介质-&amp;gt;映射 CD/DVD，选择 ISO 镜像，选择系统镜像</description>
    </item>
    
    <item>
      <title>cqhttp-go - 便捷开发自己的QQ机器人（一）</title>
      <link>https://blog.yurik.cafe/p/qqbot-dev-1/</link>
      <pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/qqbot-dev-1/</guid>
      <description>前言 夏天到了，又到了暑假的季节，是时候学一点新新的技术术啦！
之前一直用的是酷 Q 作为机器人框架，可惜因为一些原因，酷 Q 关闭了自己的官网，原先的免费版也无法再次登录，于是我便打算自己写一个 QQ 机器人
在互联网上一顿搜索过后，我找到了go-cqhttp，一个 QQ 机器人框架
go-cqhttp 支持HTTP API 和 HTTP POST多点上报，那么我们就可以用 python + flask 来制作一个最简单自动回复 QQ 机器人
有意思的事情，即将发生
环境搭建 首先我们肯定要登录机器人账号
具体步骤请参考基础教程
然后就是 Python 环境
使用 pip 安装以下库
requests - 与 go-cqhttp 交互
flask - 接受 go-cqhttp 上报信息
这两个是基础库，其余根据自己代码的编写自行安装
Start 开始！ </description>
    </item>
    
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>https://blog.yurik.cafe/p/hugo-blog/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/hugo-blog/</guid>
      <description>前言 我为什么选择 Hugo Hugo 是一个使用Go语言编写的静态网站生成器。 长期续费一个稳定的虚拟主机的费用是昂贵的，因此我放弃了原先的Typecho系统，转而寻找静态博客系统。在尝试了Hexo、Jekyll后，我选择了Hugo，原因首先是它支持 Markdown 语法，这使得我将文章从 Typecho 迁移至 Hugo 变得容易，其次是Stack主题仅适用于 Hugo (搭建博客第一要领：好看)
网页托管 说起网页托管，大家第一想到的大概都是Github Pages吧，最初我也是使用 gh 来对生成的动态页面进行托管，可长期使用下来我发现 gh pages 存在一些问题：
github pages 会对绑定的域名进行 cname 验证，而 Cloudflare 默认将主域名的 CNAME 拉平成 A 解析，这导致我的域名一周多了还没有通过验证 Github Pages 默认给每个域名申请免费的 SSL 证书，而我的一个域名出现了 SSL 证书出错的情况 😓，最后也没排查出是域名还是 gh pages 的问题 可能会有 DNS 污染导致 github.io 无法访问 不支持 PHP，导致我原先的一些脚本无法使用 为了解决这些问题，我在知乎游了一圈，发现了一个宝藏部署服务：Vercel
Vercel 有以下优点：
访问速度比 Github Pages 快
比 Github Pages 稳定
自带 SSL 证书
支持将域名 DNS 服务器迁移至 Vercel
放一张 Github Pages 与 Vercel 速度对比图（左：Gh Pages | 右：vercel） 数据、地图来自 站长工具 &amp;gt; 国内网站测速</description>
    </item>
    
    <item>
      <title>【转载】又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API</title>
      <link>https://blog.yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/</guid>
      <description>原文链接：PRIN BLOG - 又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API
共享协议：本文与原文采用相同的 CC BY 4.0 协议而非本博客默认的共享协议
最近给 Blessing Skin 写了个插件，利用皮肤站本身的账号系统实现了 Yggdrasil API（就是 Mojang 的登录 API），然后配合 authlib-injector 这个项目将启动器（基于 Java 编写的支持正版登录的启动器都行）、Minecraft 游戏、Minecraft 服务端中的 Mojang Yggdrasil API 地址给替换成了自己实现的第三方 Yggdrasil API 地址（字节码替换），从而实现了与正版登录功能几乎完全相同的账户鉴权系统。
通俗地讲，就是我把 Mojang 的正版登录 API 给【劫持】成自己的啦，所以可以像登录正版那样直接用皮肤站的邮箱和密码登录游戏（还支持 Mojang 都不支持的多用户选择哦）。这种外置登录系统的实现应该可以说是比市面上的软件都要完善（毕竟可以直接利用 Minecraft 本身自带的鉴权模块），因此写一篇博文介绍一下这些实现之间的不同之处，顺带记录一下实现 Yggdrasil API 时踩到的坑，算是抛砖引玉了。
注意：本文不适合小白及问题解决能力弱的人群阅读。
感觉我明明好久没玩 MC 了，要玩也都是玩正版服务器，但是却一直在搞这些盗版服用的东西，我真是舍己为人造福大众普惠众生啊（不
服务器内置登录插件 相信维护过 Minecraft 服务器（当然，我这边说的是运行在离线模式下的服务器）的腐竹们或多或少都听说过 Authme、CrazyLogin 等登录插件的鼎鼎大名吧。由于这些服务器运作在离线模式（online-mode=false，即俗称的盗版模式）下，缺少 Mojang 官方账户认证系统的支持，所以必须使用这类插件来进行玩家认证（否则随便谁都可以冒名顶替别人了，换一个登录角色名就行）。
这类插件的工作原理就是在服务端维护一个数据表，表中每一条记录中存储了角色的「角色名」、「登录密码」、「注册时间」、「登录 IP 地址」等等信息，当玩家初次进入服务器时需要通过这些插件进行注册操作（e.g. /register 命令）并在表中插入一条记录，注册完毕后进入服务器则需要输入密码（e.g. /login &amp;lt;password&amp;gt; 命令）来认证。
其实这样的解决方案也没什么不好，而且现在 Authme 等登录插件在众多的服务器中都还是主流。但是，如果你的服务器已经发展到比较大型了，或许你就比较希望有这样一个东西：</description>
    </item>
    
  </channel>
</rss>
