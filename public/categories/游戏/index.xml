<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>游戏 on 景蓝の小屋</title>
    <link>https://yurik.cafe/categories/%E6%B8%B8%E6%88%8F/</link>
    <description>Recent content in 游戏 on 景蓝の小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 14 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yurik.cafe/categories/%E6%B8%B8%E6%88%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Linux上搭建MC服务器（一）</title>
      <link>https://yurik.cafe/p/minecraft-server-on-linux-1/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/minecraft-server-on-linux-1/</guid>
      <description>接上文
自从有了一台独立服务器后，可以玩的东西就多了
于是决定开一个我的世界 Java 服务器
写一篇文章记录一下
一、安装运行环境 Minecraft Java 版的服务器运行环境非常单纯，只需要一个 Java 就行
由于我想开一个 1.16.5 的服务器，所以 Java 版本选择了 Java 17
安装过程参考的这篇文章《Linux 安装 Java 17 - ChaosMoor》
二、下载服务端 Minecraft 服务端有很多种，例如原版香草端(Vanilla)、Paper、Bukkit 等
由于我希望保留原版的红石特性，所以选择了原版服务端
对于最新版本的 Minecraft 服务器，可以前往Minecraft.net下载 jar 文件
如果你想获取特定版本的服务端文件，可以访问Minecraft Wiki搜索对应版本页面
▲ Wiki 界面
Download(下载) -&amp;gt; Server(服务端)下载服务端
注意，不开玩笑！：千万不要误点括号后的(.json)文件，或错选 Obfuscation maps(混淆映射表)中的 Server(服务器)选项
三、运行服务器 进入终端
在服务器上新建一个文件夹存放服务端文件
mkdir &amp;lt;文件夹名称&amp;gt;
进入文件夹
cd &amp;lt;刚才的文件夹名称&amp;gt;
将下载好的服务端文件上传至该文件夹
▲ 使用 WinSCP 上传
我在这里将服务端命名为 server.jar
修改文件权限
chmod 744 &amp;lt;服务端文件名&amp;gt;.jar
然后运行服务器！
java -Xmx1024M -Xms1024M -jar &amp;lt;服务端文件名&amp;gt;.</description>
    </item>
    
    <item>
      <title>谢谢你，我的宝😘</title>
      <link>https://yurik.cafe/p/thanks-to-norphin/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/thanks-to-norphin/</guid>
      <description>RT</description>
    </item>
    
    <item>
      <title>【转载】又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API</title>
      <link>https://yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/</guid>
      <description>原文链接：PRIN BLOG - 又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API
共享协议：本文与原文采用相同的 CC BY 4.0 协议而非本博客默认的共享协议
最近给 Blessing Skin 写了个插件，利用皮肤站本身的账号系统实现了 Yggdrasil API（就是 Mojang 的登录 API），然后配合 authlib-injector 这个项目将启动器（基于 Java 编写的支持正版登录的启动器都行）、Minecraft 游戏、Minecraft 服务端中的 Mojang Yggdrasil API 地址给替换成了自己实现的第三方 Yggdrasil API 地址（字节码替换），从而实现了与正版登录功能几乎完全相同的账户鉴权系统。
通俗地讲，就是我把 Mojang 的正版登录 API 给【劫持】成自己的啦，所以可以像登录正版那样直接用皮肤站的邮箱和密码登录游戏（还支持 Mojang 都不支持的多用户选择哦）。这种外置登录系统的实现应该可以说是比市面上的软件都要完善（毕竟可以直接利用 Minecraft 本身自带的鉴权模块），因此写一篇博文介绍一下这些实现之间的不同之处，顺带记录一下实现 Yggdrasil API 时踩到的坑，算是抛砖引玉了。
注意：本文不适合小白及问题解决能力弱的人群阅读。
感觉我明明好久没玩 MC 了，要玩也都是玩正版服务器，但是却一直在搞这些盗版服用的东西，我真是舍己为人造福大众普惠众生啊（不
一、服务器内置登录插件 相信维护过 Minecraft 服务器（当然，我这边说的是运行在离线模式下的服务器）的腐竹们或多或少都听说过 Authme、CrazyLogin 等登录插件的鼎鼎大名吧。由于这些服务器运作在离线模式（online-mode=false，即俗称的盗版模式）下，缺少 Mojang 官方账户认证系统的支持，所以必须使用这类插件来进行玩家认证（否则随便谁都可以冒名顶替别人了，换一个登录角色名就行）。
这类插件的工作原理就是在服务端维护一个数据表，表中每一条记录中存储了角色的「角色名」、「登录密码」、「注册时间」、「登录 IP 地址」等等信息，当玩家初次进入服务器时需要通过这些插件进行注册操作（e.g. /register 命令）并在表中插入一条记录，注册完毕后进入服务器则需要输入密码（e.g. /login &amp;lt;password&amp;gt; 命令）来认证。
其实这样的解决方案也没什么不好，而且现在 Authme 等登录插件在众多的服务器中都还是主流。但是，如果你的服务器已经发展到比较大型了，或许你就比较希望有这样一个东西：</description>
    </item>
    
  </channel>
</rss>
