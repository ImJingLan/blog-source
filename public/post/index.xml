<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 景蓝の小屋</title>
    <link>https://yurik.cafe/post/</link>
    <description>Recent content in Posts on 景蓝の小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 15 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yurik.cafe/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dictum开发日志 2022-12-25</title>
      <link>https://yurik.cafe/p/dictum-dev-log-22-12-15/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/dictum-dev-log-22-12-15/</guid>
      <description>Dictum 开发进度 [2022-12-15] 终于拾起几个月前的 Dictum 屎山代码了，在今日的更新中，我完善了 API 公开接口，伴随着 API 结构的大改
同时，用户的基本安全功能也已经实现： [x] 修改密码 [x] 刷新 TOKEN
得益于 Token 机制的引入，前端调用更加地便捷
本次架构重构学习了kasuganosoras/Pigeon(就是本站的程序)，对于 Dashboard 与 Api 均采用了模块设计，方便后续代码维护
本次更新大致内容如下
规范变量命名 添加管理面板主页与账号信息页 实现密码修改与 Token 刷新 更改了 API 目录结构 下面是详细信息
重要内容 API 更改 为适应后续功能（账户管理 API）开发与代码可维护性需要，我们修改了 API 结构，原先的语句 API 终结点由/api/?type=[type]变更为/api/dictums/?module=[type]，基本语法不变
添加了用户账户管理 API 接口，终结点为/api/users//module=[module]，目前还在规范与完善中……
管理面板 我们在本次更新中实现了管理面板的雏形，并完成了用户账户密码的自主修改与令牌手动刷新
数据库 为适应后续功能（账户管理 API）开发与代码可维护性需要，我们更新了数据表的结构，在 users 表中添加 token(令牌) 与 reg_date(注册时间)，并计划在之后的更新中为用户及语句添加 UUID 项</description>
    </item>
    
    <item>
      <title>在Linux上搭建MC服务器（一）</title>
      <link>https://yurik.cafe/p/minecraft-server-on-linux-1/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/minecraft-server-on-linux-1/</guid>
      <description>接上文
自从有了一台独立服务器后，可以玩的东西就多了
于是决定开一个我的世界Java服务器
写一篇文章记录一下
一、安装运行环境 Minecraft Java版的服务器运行环境非常单纯，只需要一个Java就行
由于我想开一个1.16.5的服务器，所以Java版本选择了Java 17
安装过程参考的这篇文章《Linux 安装 Java 17 - ChaosMoor》
二、下载服务端 Minecraft服务端有很多种，例如原版香草端(Vanilla)、Paper、Bukkit等
由于我希望保留原版的红石特性，所以选择了原版服务端
对于最新版本的Minecraft服务器，可以前往Minecraft.net下载jar文件
如果你想获取特定版本的服务端文件，可以访问Minecraft Wiki搜索对应版本页面
▲ Wiki界面
Download(下载) -&amp;gt; Server(服务端)下载服务端
注意，不开玩笑！：千万不要误点括号后的(.json)文件，或错选Obfuscation maps(混淆映射表)中的Server(服务器)选项
三、运行服务器 进入终端
在服务器上新建一个文件夹存放服务端文件
mkdir &amp;lt;文件夹名称&amp;gt;
进入文件夹
cd &amp;lt;刚才的文件夹名称&amp;gt;
将下载好的服务端文件上传至该文件夹
▲ 使用WinSCP上传
我在这里将服务端命名为server.jar
修改文件权限
chmod 744 &amp;lt;服务端文件名&amp;gt;.jar
然后运行服务器！
java -Xmx1024M -Xms1024M -jar &amp;lt;服务端文件名&amp;gt;.jar nogui
▲ 终端报错了
怎么回事，闪退啦?
查了下翻译软件，发现是要你同意Eula文件
做法很简单
用文本编辑器将eula.txt中最后一行eula=false修改为eula=true再次运行即可
▲ EULA.TXT修改后
记住这点更好：当你将eula改为true后，即代表你同意了《MINECRAFT 最终用户许可协议》, 因此你最好详细阅读一下
四、服务器配置 无论是什么客户端，server.properties是必须的配置文件，当然，在第一次运行服务端时会自动生成，文件内容 + 必要注释 如下
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #Minecraft server properties enable-jmx-monitoring=false rcon.</description>
    </item>
    
    <item>
      <title>iPod Classic 上手 :  优雅永不过时</title>
      <link>https://yurik.cafe/p/ipod-classic-review/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/ipod-classic-review/</guid>
      <description>这篇文章是一篇补档，由于博客系统的更换，原文已丢失
引言 iPod Classic</description>
    </item>
    
    <item>
      <title>获取B站视频封面</title>
      <link>https://yurik.cafe/p/get-bilibili-album/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/get-bilibili-album/</guid>
      <description>〇、前言 最近重装了电脑，然后电脑上整理的iTunes资料库全没了。草
在整理的时候发现有一些歌曲是直接从B站上下载下来的，专辑封面也是从B站封面扒的，全没了（呜呜呜
虽然在Bing上一搜就有很多封面提取的网站
但是秉承着用轮子不如造轮子的理论(其实就是闲着没事)，我决定自己用Python写一个提取封面的工具
一、准备工作 既然是造轮子，那当然要先看B站的API
搜了一下，发现网上公认的哔哩哔哩官方API文档地址是：http://docs.bilibili.cn/wiki
但是
在Github上面找到的野生文档 SocialSisterYi/bilibili-API-collect
API
获取视频信息
https://api.bilibili.com/x/web-interface/view?bvid=BV号
丢**json.cn**解析一下
{ &amp;#34;code&amp;#34;:0, &amp;#34;message&amp;#34;:&amp;#34;0&amp;#34;, &amp;#34;ttl&amp;#34;:1, &amp;#34;data&amp;#34;:{ &amp;#34;bvid&amp;#34;:&amp;#34;BV1d54y1n7NX&amp;#34;, &amp;#34;aid&amp;#34;:846717078, &amp;#34;videos&amp;#34;:1, &amp;#34;tid&amp;#34;:28, &amp;#34;tname&amp;#34;:&amp;#34;原创音乐&amp;#34;, &amp;#34;copyright&amp;#34;:1, &amp;#34;pic&amp;#34;:&amp;#34;http://i0.</description>
    </item>
    
    <item>
      <title>戴尔 PowerEdge R720 上手 : 年轻人的第一台家庭服务器</title>
      <link>https://yurik.cafe/p/dell-poweredge-r720-review/</link>
      <pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/dell-poweredge-r720-review/</guid>
      <description>假期咯，是时候折腾一些新玩意啦！
假期开始的时候在一个同学家玩（下面叫他叫兽），突然有一天他说：“再过几周我想和你研究一下怎么写网页（HTML），顺便学学怎么搭建服务器。”
“服务器嘛，你自己用一台电脑开就好了。”
但我真的想要一台服务器啊QwQ
回到家我越想越睡不着，越想越睡不着
于是我
开箱 U1S1，这玩意是真的沉。顺丰小哥推着一个推车帮我推上来的，辛苦了 Orz
顺丰小哥：你买了什么啊，这么沉？
商家发的真的结实，除了泡沫外顶上还有一层防摔垫
（由于没有图，就不放了QWQ，大家看看上面的说说吧
iDRAC YYDS？ 得益于戴尔强大的iDRAC助力，使安装系统变成了一件 极其容易 的事
—— 景蓝Yurik
这是我问云资后得出的初结论
真的吗？
这件事可能对于一台新的Dell服务器来说，易如反掌，但对于这样一台二手服务器，却花费了我和云资一个下午
首先，服务器需要在原先网口的基础上再连接iDRAC的网口（也就是两根网线）
我的解决方案是PDD 58元的 水星5口全千兆交换机
一开始，iDrac的默认地址一直无法连接(https)
重置之后Edge浏览器便提示
使用不受支持的协议
ERR_SSL_VERSION_OR_CIPHER_MISMATCH
无论是Chrome Firefox 还是 Edge 即使进入Windows设置支持SSL 3.0 后仍于事无补
最后解决方案是使用Edge的IE模式访问（没想到IE还是蛮有用的）
点亮 既然进入的iDRAC，我们就启动虚拟控制台吧
点击 虚拟介质-&amp;gt;连接虚拟介质
等待连接后点 虚拟介质-&amp;gt;映射CD/DVD，选择 ISO镜像，选择系统镜像
选择 下次引导-&amp;gt;虚拟CD/DVD/ISO
电源-&amp;gt;系统关机后再开机（冷引导）
重启后就和正常安装系统一样了
我安装了Proxmox Virtual Environment ( PVE ),这样可以在一台设备上跑多个系统，ALL IN ONE YYDS!
截图时候还在装着Centos 用来跑 Rimetown 的 主要服务
后来还装了一个OpenMediaVault来做Nas
注意 二手服务器到了之后一定要去BIOS里面重置一下iDRAC设置，并且最好不要让iDRAC使用DHCP获取IP，自己指定一个会方便很多
购买服务器后的部分问题 &amp;amp; 可能有用的解决方案 风扇开机后一直全功率运行 进入BIOS里面的System BIOS Settings -&amp;gt; System Profile Settings 里面检查一下C1E有没有设置成Enabled</description>
    </item>
    
    <item>
      <title>cqhttp-go - 便捷开发自己的QQ机器人（一）</title>
      <link>https://yurik.cafe/p/qqbot-dev-1/</link>
      <pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/qqbot-dev-1/</guid>
      <description>前言 夏天到了，又到了暑假的季节，是时候学一点新新的技术术啦！
之前一直用的是酷Q作为机器人框架，可惜因为一些原因，酷Q关闭了自己的官网，原先的免费版也无法再次登录，于是我便打算自己写一个QQ机器人
在互联网上一顿搜索过后，我找到了go-cqhttp，一个QQ机器人框架
go-cqhttp支持HTTP API 和 HTTP POST多点上报，那么我们就可以用python + flask来制作一个最简单自动回复QQ机器人
有意思的事情，即将发生
环境搭建 首先我们肯定要登录机器人账号
具体步骤请参考基础教程
然后就是Python环境
使用pip安装以下库
requests - 与go-cqhttp交互
flask - 接受go-cqhttp上报信息
这两个是基础库，其余根据自己代码的编写自行安装</description>
    </item>
    
    <item>
      <title>P1425 - 小鱼的游泳时间</title>
      <link>https://yurik.cafe/p/luogu-p1425/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/luogu-p1425/</guid>
      <description>好久没碰过C++了，也好久没碰竞赛了
今天突然想起来去洛谷注册了个账号（（（
从入门题库中看到了这道入门题
觉得蛮有意思的，就记一下过程
题目 原题：洛谷 - P1425 小鱼的游泳时间
题目描述 伦敦奥运会要到了，小鱼在拼命练习游泳准备参加游泳比赛，可怜的小鱼并不知道鱼类是不能参加人类的奥运会的。
这一天，小鱼给自己的游泳时间做了精确的计时（本题中的计时都按24小时制计算），它发现自己从a时b分一直游泳到当天的c时d分，请你帮小鱼计算一下，它这天一共游了多少时间呢？
小鱼游的好辛苦呀，你可不要算错了哦。
输入格式 一行内输入 4 个整数，分别表示 a, b, c, d。
输出格式 一行内输出 2 个整数 e 和 f，用空格间隔，依次表示小鱼这天一共游了多少小时多少分钟。其中表示分钟的整数 f 应该小于60。
输入输出样例 输入 #1
1 12 50 19 10 输出 #1
1 6 20 说明/提示 对于全部测试数据，0 ≤ a,*c *≤ 24，0 ≤ b,d ≤ 600 ≤ b,d ≤ 60，且结束时间一定晚于开始时间。
解题 很显然，这就是一个数学问题：怎么通过时间格式计算间隔
1.通过计算将时间统一到所需最小单位 - minute
2.通过取整，取余计算获得结果
AC代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include&amp;lt;iostream&amp;gt; #include&amp;lt;cstdio&amp;gt; using namespace std; int a,b,c,d; int main() { cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b&amp;gt;&amp;gt;c&amp;gt;&amp;gt;d; int allminute = 60*(c-a-1)+(60-b)+d; int hours = allminute / 60; cout&amp;lt;&amp;lt;hours; cout&amp;lt;&amp;lt;&amp;#34; &amp;#34;&amp;lt;&amp;lt;allminute %60; return 0; } </description>
    </item>
    
    <item>
      <title>谢谢你，我的宝😘</title>
      <link>https://yurik.cafe/p/thanks-to-norphin/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/thanks-to-norphin/</guid>
      <description>RT</description>
    </item>
    
    <item>
      <title>Scoop - 一款强大的Windows包管理工具</title>
      <link>https://yurik.cafe/p/install-scoop/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/install-scoop/</guid>
      <description>〇、Scoop是什么 Scoop是一款在Windows上的包管理器
Q：什么是包管理器？ A：简单来说，“包管理器”（或“软件包管理器”）是一种工具，它允许用户在操作系统上安装、删除、升级、配置和管理软件包。软件包管理器可以是像“软件中心”这样的图形化应用，也可以是像 apt-get 或 pacman 这样的命令行工具。
来自https://linux.cn/article-12713-1.html
Q:为什么选择Scoop（Scoop有什么优点） 仍在维护
不依赖管理员权限
防止安装大量程序造成的PATH污染
避免了安装和卸载程序的意外副作用
自动查找和安装依赖项
自己执行所有额外的安装步骤，以获得一个工作程序
翻译自Scoop的README文件
一、安装scoop win + r 打开运行窗口
输入Powershell
在打开的窗口中输入
1 iwr -useb get.scoop.sh | iex 或者
1 Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&amp;#39;https://get.scoop.sh&amp;#39;) 如果您收到错误，您可能需要更改执行策略（即启用Powershell）
1 Set-ExecutionPolicy RemoteSigned -scope CurrentUser 当Powershell显示&amp;quot;Scoop was installed successfully!&amp;ldquo;时，即代表你的scoop已安装完成
二、Scoop的使用 待更新。。。。。。</description>
    </item>
    
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>https://yurik.cafe/p/hugo-blog/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/hugo-blog/</guid>
      <description>〇、前言 0.1 我为什么选择Hugo Hugo是一个使用Go语言编写的静态网站生成器。 长期续费一个稳定的虚拟主机的费用是昂贵的，因此我放弃了原先的Typecho系统，转而寻找静态博客系统。在尝试了Hexo、Jekyll后，我选择了Hugo，原因首先是它支持Markdown语法，这使得我将文章从Typecho迁移至Hugo变得容易，其次是Stack主题仅适用于Hugo (搭建博客第一要领：好看)
0.2 网页托管 说起网页托管，大家第一想到的大概都是Github Pages吧，最初我也是使用gh来对生成的动态页面进行托管，可长期使用下来我发现gh pages存在一些问题：
github pages会对绑定的域名进行cname验证，而Cloudflare默认将主域名的CNAME拉平成A解析，这导致我的域名一周多了还没有通过验证 Github Pages默认给每个域名申请免费的SSL证书，而我的一个域名出现了SSL证书出错的情况😓，最后也没排查出是域名还是gh pages的问题 可能会有DNS污染导致github.io无法访问 不支持PHP，导致我原先的一些脚本无法使用 为了解决这些问题，我在知乎游了一圈，发现了一个宝藏部署服务：Vercel
Vercel有以下优点：
访问速度比Github Pages快
比Github Pages稳定
自带SSL证书
支持将域名DNS服务器迁移至Vercel
放一张Github Pages与Vercel速度对比图（左：Gh Pages | 右：vercel） 数据、地图来自 站长工具 &amp;gt; 国内网站测速
Vercel 比 GhPages 绿多了（逃
一、准备工作 1.1 安装Hugo 本文仅展示使用Windows安装Hugo
本教程中使用 scoop软件包管理器 安装
其余方法大同小异，请自行使用搜索引擎搜索
安装scoop，请看这篇文章：Scoop - 一款强大的Windows包管理工具
win + r 打开运行窗口
输入Powershell
在打开的窗口中输入
scoop install hugo
或者用以下方式安装扩展版本
scoop install hugo-extended
当控制台显示&amp;lsquo;hugo&amp;rsquo; (0.92.2) was installed successfully!时代表安装已完成
若选择安装拓展版本，则当显示&amp;lsquo;hugo&amp;rsquo; (0.92.2) was installed successfully!</description>
    </item>
    
    <item>
      <title>【转载】又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API</title>
      <link>https://yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/</guid>
      <description>原文链接：PRIN BLOG - 又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API
共享协议：本文与原文采用相同的 CC BY 4.0 协议而非本博客默认的共享协议
最近给 Blessing Skin 写了个插件，利用皮肤站本身的账号系统实现了 Yggdrasil API（就是 Mojang 的登录 API），然后配合 authlib-injector 这个项目将启动器（基于 Java 编写的支持正版登录的启动器都行）、Minecraft 游戏、Minecraft 服务端中的 Mojang Yggdrasil API 地址给替换成了自己实现的第三方 Yggdrasil API 地址（字节码替换），从而实现了与正版登录功能几乎完全相同的账户鉴权系统。
通俗地讲，就是我把 Mojang 的正版登录 API 给【劫持】成自己的啦，所以可以像登录正版那样直接用皮肤站的邮箱和密码登录游戏（还支持 Mojang 都不支持的多用户选择哦）。这种外置登录系统的实现应该可以说是比市面上的软件都要完善（毕竟可以直接利用 Minecraft 本身自带的鉴权模块），因此写一篇博文介绍一下这些实现之间的不同之处，顺带记录一下实现 Yggdrasil API 时踩到的坑，算是抛砖引玉了。
注意：本文不适合小白及问题解决能力弱的人群阅读。
感觉我明明好久没玩 MC 了，要玩也都是玩正版服务器，但是却一直在搞这些盗版服用的东西，我真是舍己为人造福大众普惠众生啊（不
一、服务器内置登录插件 相信维护过 Minecraft 服务器（当然，我这边说的是运行在离线模式下的服务器）的腐竹们或多或少都听说过 Authme、CrazyLogin 等登录插件的鼎鼎大名吧。由于这些服务器运作在离线模式（online-mode=false，即俗称的盗版模式）下，缺少 Mojang 官方账户认证系统的支持，所以必须使用这类插件来进行玩家认证（否则随便谁都可以冒名顶替别人了，换一个登录角色名就行）。
这类插件的工作原理就是在服务端维护一个数据表，表中每一条记录中存储了角色的「角色名」、「登录密码」、「注册时间」、「登录 IP 地址」等等信息，当玩家初次进入服务器时需要通过这些插件进行注册操作（e.g. /register 命令）并在表中插入一条记录，注册完毕后进入服务器则需要输入密码（e.g. /login &amp;lt;password&amp;gt; 命令）来认证。
其实这样的解决方案也没什么不好，而且现在 Authme 等登录插件在众多的服务器中都还是主流。但是，如果你的服务器已经发展到比较大型了，或许你就比较希望有这样一个东西：</description>
    </item>
    
    <item>
      <title>你好，好久不见</title>
      <link>https://yurik.cafe/p/hello-world/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurik.cafe/p/hello-world/</guid>
      <description>重新认识一下吧 从初一开始捣鼓自己的服务器，从一开始在一台废旧的办公电脑上安装Windows Server搭配Sakura Frp国外服务器的穿透来使自己的网站能够访问（那时候建站节点还没有收费），后来将系统装成了 CentOS 7，从此就一直泡在Linux系统里面了
那时候 Sakura Frp 的节点对于我家的网络还不是特别的稳定，有一次一个月内换了好几个节点。（也有可能是移动网络的问题）
后来接触了虚拟主机，陆陆续续换了几家主机商，可最终因为没钱而取消续费
现在的博客的框架是Hugo + Vercel，优势就是免费，并且我的文章在本地留有备份
就这样吧。
感谢你读到这里。
你好，好久不见</description>
    </item>
    
  </channel>
</rss>
