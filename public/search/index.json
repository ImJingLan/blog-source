[{"content":"申请教程 进入申请链接，点击立即加入，登录你的微软账户\n别忘了去个人资料添加自己的姓氏和名称，不然无法注册\n姓名添加后可能需要等待几个小时后才可以注册\n选择你的 国家/地区, 填写你的公司名称, 勾选同意协议\n接下来的几个页面自己看着选就可以啦\n在 设置 Microsoft 365 E5 沙盒 页面中选择 可配置沙盒\n填写 管理员用户名 、 域 和 管理员密码\n若域冲突请换用其它的域名称\n在弹出的页面中输入手机号并填写验证码\n稍安勿躁，等待一会儿后就申请成功了\n","date":"2022-12-21T00:00:00Z","permalink":"https://yurik.cafe/p/create-an-office-e5-account/","title":"Office 365 E5 账号申请"},{"content":"接上文\n自从有了一台独立服务器后，可以玩的东西就多了\n于是决定开一个我的世界 Java 服务器\n写一篇文章记录一下\n一、安装运行环境 Minecraft Java 版的服务器运行环境非常单纯，只需要一个 Java 就行\n由于我想开一个 1.16.5 的服务器，所以 Java 版本选择了 Java 17\n安装过程参考的这篇文章《Linux 安装 Java 17 - ChaosMoor》\n二、下载服务端 Minecraft 服务端有很多种，例如原版香草端(Vanilla)、Paper、Bukkit 等\n由于我希望保留原版的红石特性，所以选择了原版服务端\n对于最新版本的 Minecraft 服务器，可以前往Minecraft.net下载 jar 文件\n如果你想获取特定版本的服务端文件，可以访问Minecraft Wiki搜索对应版本页面\n▲ Wiki 界面\nDownload(下载) -\u0026gt; Server(服务端)下载服务端\n注意，不开玩笑！：千万不要误点括号后的(.json)文件，或错选 Obfuscation maps(混淆映射表)中的 Server(服务器)选项\n三、运行服务器 进入终端\n在服务器上新建一个文件夹存放服务端文件\nmkdir \u0026lt;文件夹名称\u0026gt;\n进入文件夹\ncd \u0026lt;刚才的文件夹名称\u0026gt;\n将下载好的服务端文件上传至该文件夹\n▲ 使用 WinSCP 上传\n我在这里将服务端命名为 server.jar\n修改文件权限\nchmod 744 \u0026lt;服务端文件名\u0026gt;.jar\n然后运行服务器！\njava -Xmx1024M -Xms1024M -jar \u0026lt;服务端文件名\u0026gt;.jar nogui\n▲ 终端报错了\n怎么回事，闪退啦?\n查了下翻译软件，发现是要你同意 Eula 文件\n做法很简单\n用文本编辑器将 eula.txt 中最后一行eula=false修改为eula=true再次运行即可\n▲ EULA.TXT 修改后\n记住这点更好：当你将 eula 改为true后，即代表你同意了《MINECRAFT 最终用户许可协议》, 因此你最好详细阅读一下\n四、服务器配置 无论是什么客户端，server.properties是必须的配置文件，当然，在第一次运行服务端时会自动生成，文件内容 + 必要注释 如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #Minecraft server properties enable-jmx-monitoring=false rcon.port=25575 level-seed= # 服务器种子（用于第一次生成地图） gamemode=survival # 服务器模式 ：creative:创造 survival:生存 adventure:冒险模式 enable-command-block=false # 是否启用命令方块 enable-query=false generator-settings= level-name=world motd=A Minecraft Server # 服务器标语，即客户端显示的文字 query.port=25565 pvp=true # 是否开启PVP generate-structures=true # 生成自然结构 difficulty=easy # 服务器难度 network-compression-threshold=256 max-tick-time=60000 use-native-transport=true max-players=20 # 服务器最高人数 online-mode=true # 是否开启正常验证 enable-status=true allow-flight=false # 是否运行浮空（黑客端） broadcast-rcon-to-ops=true view-distance=10 max-build-height=256 server-ip= allow-nether=true # 是否开启末地 server-port=25565 # 服务器端口，默认25565 enable-rcon=false sync-chunk-writes=true op-permission-level=4 prevent-proxy-connections=false resource-pack= entity-broadcast-range-percentage=100 rcon.password= player-idle-timeout=0 force-gamemode=false rate-limit=0 hardcore=false white-list=false # 是否开启白名单 broadcast-console-to-ops=true spawn-npcs=true # 是否生成NPC (村民等生物) spawn-animals=true # 是否生成动物 snooper-enabled=true function-permission-level=2 level-type=default text-filtering-config= spawn-monsters=true enforce-whitelist=false resource-pack-sha1= spawn-protection=16 max-world-size=29999984 可以对应自己实际情况修改，也可以下载我的配置文件（基本默认）\n五、成功 ▲ 游戏内的显示效果\n","date":"2022-12-14T00:00:00Z","image":"https://yurik.cafe/p/minecraft-server-on-linux-1/done_hucedda61d3d9d66978b7043cd2dc339e8_484755_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/minecraft-server-on-linux-1/","title":"在Linux上搭建MC服务器（一）"},{"content":" 这篇文章是一篇补档，由于博客系统的更换，原文已丢失\n引言 iPod Classic\n","date":"2022-12-13T00:00:00Z","image":"https://yurik.cafe/p/ipod-classic-review/banner_hu92c4cd8f9e11fbf77bef0a401274fe11_2056593_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/ipod-classic-review/","title":"iPod Classic 上手 :  优雅永不过时"},{"content":"〇、前言 最近重装了电脑，然后电脑上整理的 iTunes 资料库全没了。草\n在整理的时候发现有一些歌曲是直接从 B 站上下载下来的，专辑封面也是从 B 站封面扒的，全没了（呜呜呜\n虽然在 Bing 上一搜就有很多封面提取的网站\n但是秉承着用轮子不如造轮子的理论(其实就是闲着没事)，我决定自己用 Python 写一个提取封面的工具\n一、准备工作 既然是造轮子，那当然要先看 B 站的 API\n搜了一下，发现网上公认的哔哩哔哩官方 API 文档地址是：http://docs.bilibili.cn/wiki\n但是\n在 Github 上面找到的野生文档 SocialSisterYi/bilibili-API-collect\nAPI\n获取视频信息\nhttps://api.bilibili.com/x/web-interface/view?bvid=BV号\n丢**json.cn**解析一下\n{ \u0026#34;code\u0026#34;:0, \u0026#34;message\u0026#34;:\u0026#34;0\u0026#34;, \u0026#34;ttl\u0026#34;:1, \u0026#34;data\u0026#34;:{ \u0026#34;bvid\u0026#34;:\u0026#34;BV1d54y1n7NX\u0026#34;, \u0026#34;aid\u0026#34;:846717078, \u0026#34;videos\u0026#34;:1, \u0026#34;tid\u0026#34;:28, \u0026#34;tname\u0026#34;:\u0026#34;原创音乐\u0026#34;, \u0026#34;copyright\u0026#34;:1, \u0026#34;pic\u0026#34;:\u0026#34;http://i0.hdslb.com/bfs/archive/38ee715cfe85351c790102691d01d05007092c9e.jpg\u0026#34;, \u0026#34;title\u0026#34;:\u0026#34;【咩栗x呜米】噬光者与发光体的爱情【原创曲】\u0026#34;, \u0026#34;pubdate\u0026#34;:1626429602, \u0026#34;ctime\u0026#34;:1626332074, \u0026#34;desc\u0026#34;:\u0026#34;“为何越是接近 越遥不可及”\\n“分明你是我的恒星”\\n \\n演唱：呜米x咩栗\\n策划：叁咉/作曲：烂兔子/作词：雨狸/曲绘：团一 六点/修音：橘太太（边银工作室）/Vocal Producer：无机草莓/视频：拉浮浮/企划：星海 DBRT/音乐统筹：依溪禾/封面：二七/统筹：星米/助力：秋山枫\\n\\nVOCALOID版本：BV1ah41167kJ\\n\\n二创包链接：https://pan.baidu.com/s/1HNs6x8jRlebZumMFihebig \\r提取码：wmml\\n欢迎二创！\u0026#34;, \u0026#34;desc_v2\u0026#34;:[ { \u0026#34;raw_text\u0026#34;:\u0026#34;“为何越是接近 越遥不可及”\\n“分明你是我的恒星”\\n \\n演唱：呜米x咩栗\\n策划：叁咉/作曲：烂兔子/作词：雨狸/曲绘：团一 六点/修音：橘太太（边银工作室）/Vocal Producer：无机草莓/视频：拉浮浮/企划：星海 DBRT/音乐统筹：依溪禾/封面：二七/统筹：星米/助力：秋山枫\\n\\nVOCALOID版本：BV1ah41167kJ\\n\\n二创包链接：https://pan.baidu.com/s/1HNs6x8jRlebZumMFihebig \\r提取码：wmml\\n欢迎二创！\u0026#34;, \u0026#34;type\u0026#34;:1, \u0026#34;biz_id\u0026#34;:0 } ], \u0026#34;state\u0026#34;:0, \u0026#34;duration\u0026#34;:237, \u0026#34;rights\u0026#34;:{ \u0026#34;bp\u0026#34;:0, \u0026#34;elec\u0026#34;:0, \u0026#34;download\u0026#34;:1, \u0026#34;movie\u0026#34;:0, \u0026#34;pay\u0026#34;:0, \u0026#34;hd5\u0026#34;:1, \u0026#34;no_reprint\u0026#34;:1, \u0026#34;autoplay\u0026#34;:1, \u0026#34;ugc_pay\u0026#34;:0, \u0026#34;is_cooperation\u0026#34;:1, \u0026#34;ugc_pay_preview\u0026#34;:0, \u0026#34;no_background\u0026#34;:0, \u0026#34;clean_mode\u0026#34;:0, \u0026#34;is_stein_gate\u0026#34;:0 }, \u0026#34;owner\u0026#34;:{ \u0026#34;mid\u0026#34;:745493, \u0026#34;name\u0026#34;:\u0026#34;咩栗\u0026#34;, \u0026#34;face\u0026#34;:\u0026#34;http://i2.hdslb.com/bfs/face/9ea6ed607cb0b4adb19ace945586d2cf50797589.jpg\u0026#34; }, \u0026#34;stat\u0026#34;:{ \u0026#34;aid\u0026#34;:846717078, \u0026#34;view\u0026#34;:222770, \u0026#34;danmaku\u0026#34;:3048, \u0026#34;reply\u0026#34;:3396, \u0026#34;favorite\u0026#34;:17076, \u0026#34;coin\u0026#34;:26468, \u0026#34;share\u0026#34;:2426, \u0026#34;now_rank\u0026#34;:0, \u0026#34;his_rank\u0026#34;:0, \u0026#34;like\u0026#34;:31918, \u0026#34;dislike\u0026#34;:0, \u0026#34;evaluation\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;argue_msg\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;dynamic\u0026#34;:\u0026#34;如果命运可逆\\n如果我与你的灵魂 真的相契\u0026#34;, \u0026#34;cid\u0026#34;:370261661, \u0026#34;dimension\u0026#34;:{ \u0026#34;width\u0026#34;:1920, \u0026#34;height\u0026#34;:1080, \u0026#34;rotate\u0026#34;:0 }, \u0026#34;no_cache\u0026#34;:false, \u0026#34;pages\u0026#34;:[ { \u0026#34;cid\u0026#34;:370261661, \u0026#34;page\u0026#34;:1, \u0026#34;from\u0026#34;:\u0026#34;vupload\u0026#34;, \u0026#34;part\u0026#34;:\u0026#34;噬光\u0026#34;, \u0026#34;duration\u0026#34;:237, \u0026#34;vid\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;weblink\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;dimension\u0026#34;:{ \u0026#34;width\u0026#34;:1920, \u0026#34;height\u0026#34;:1080, \u0026#34;rotate\u0026#34;:0 } } ], \u0026#34;subtitle\u0026#34;:{ \u0026#34;allow_submit\u0026#34;:true, \u0026#34;list\u0026#34;:[ ] }, \u0026#34;staff\u0026#34;:[ { \u0026#34;mid\u0026#34;:745493, \u0026#34;title\u0026#34;:\u0026#34;UP主\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;咩栗\u0026#34;, \u0026#34;face\u0026#34;:\u0026#34;http://i2.hdslb.com/bfs/face/9ea6ed607cb0b4adb19ace945586d2cf50797589.jpg\u0026#34;, \u0026#34;vip\u0026#34;:{ \u0026#34;type\u0026#34;:2, \u0026#34;status\u0026#34;:1, \u0026#34;due_date\u0026#34;:1631980800000, \u0026#34;vip_pay_type\u0026#34;:0, \u0026#34;theme_type\u0026#34;:0, \u0026#34;label\u0026#34;:{ \u0026#34;path\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;text\u0026#34;:\u0026#34;年度大会员\u0026#34;, \u0026#34;label_theme\u0026#34;:\u0026#34;annual_vip\u0026#34;, \u0026#34;text_color\u0026#34;:\u0026#34;#FFFFFF\u0026#34;, \u0026#34;bg_style\u0026#34;:1, \u0026#34;bg_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;border_color\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;avatar_subscript\u0026#34;:1, \u0026#34;nickname_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;role\u0026#34;:3, \u0026#34;avatar_subscript_url\u0026#34;:\u0026#34;http://i0.hdslb.com/bfs/vip/icon_Certification_big_member_22_3x.png\u0026#34; }, \u0026#34;official\u0026#34;:{ \u0026#34;role\u0026#34;:1, \u0026#34;title\u0026#34;:\u0026#34;bilibili 知名UP主\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;type\u0026#34;:0 }, \u0026#34;follower\u0026#34;:614214, \u0026#34;label_style\u0026#34;:0 }, { \u0026#34;mid\u0026#34;:617459493, \u0026#34;title\u0026#34;:\u0026#34;演唱\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;呜米\u0026#34;, \u0026#34;face\u0026#34;:\u0026#34;http://i0.hdslb.com/bfs/face/e8ae6625537cb14f06d883072c5891eae7e21910.jpg\u0026#34;, \u0026#34;vip\u0026#34;:{ \u0026#34;type\u0026#34;:2, \u0026#34;status\u0026#34;:1, \u0026#34;due_date\u0026#34;:1676995200000, \u0026#34;vip_pay_type\u0026#34;:0, \u0026#34;theme_type\u0026#34;:0, \u0026#34;label\u0026#34;:{ \u0026#34;path\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;text\u0026#34;:\u0026#34;年度大会员\u0026#34;, \u0026#34;label_theme\u0026#34;:\u0026#34;annual_vip\u0026#34;, \u0026#34;text_color\u0026#34;:\u0026#34;#FFFFFF\u0026#34;, \u0026#34;bg_style\u0026#34;:1, \u0026#34;bg_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;border_color\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;avatar_subscript\u0026#34;:1, \u0026#34;nickname_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;role\u0026#34;:3, \u0026#34;avatar_subscript_url\u0026#34;:\u0026#34;http://i0.hdslb.com/bfs/vip/icon_Certification_big_member_22_3x.png\u0026#34; }, \u0026#34;official\u0026#34;:{ \u0026#34;role\u0026#34;:1, \u0026#34;title\u0026#34;:\u0026#34;bilibili 知名UP主\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;type\u0026#34;:0 }, \u0026#34;follower\u0026#34;:437494, \u0026#34;label_style\u0026#34;:0 }, { \u0026#34;mid\u0026#34;:605473, \u0026#34;title\u0026#34;:\u0026#34;作词\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;雨狸\u0026#34;, \u0026#34;face\u0026#34;:\u0026#34;http://i1.hdslb.com/bfs/face/eb78c0aee4431b125d60c38b176d1a25197f1834.jpg\u0026#34;, \u0026#34;vip\u0026#34;:{ \u0026#34;type\u0026#34;:2, \u0026#34;status\u0026#34;:1, \u0026#34;due_date\u0026#34;:1651766400000, \u0026#34;vip_pay_type\u0026#34;:1, \u0026#34;theme_type\u0026#34;:0, \u0026#34;label\u0026#34;:{ \u0026#34;path\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;text\u0026#34;:\u0026#34;年度大会员\u0026#34;, \u0026#34;label_theme\u0026#34;:\u0026#34;annual_vip\u0026#34;, \u0026#34;text_color\u0026#34;:\u0026#34;#FFFFFF\u0026#34;, \u0026#34;bg_style\u0026#34;:1, \u0026#34;bg_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;border_color\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;avatar_subscript\u0026#34;:1, \u0026#34;nickname_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;role\u0026#34;:3, \u0026#34;avatar_subscript_url\u0026#34;:\u0026#34;http://i0.hdslb.com/bfs/vip/icon_Certification_big_member_22_3x.png\u0026#34; }, \u0026#34;official\u0026#34;:{ \u0026#34;role\u0026#34;:1, \u0026#34;title\u0026#34;:\u0026#34;bilibili 知名音乐UP主\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;type\u0026#34;:0 }, \u0026#34;follower\u0026#34;:166644, \u0026#34;label_style\u0026#34;:0 }, { \u0026#34;mid\u0026#34;:15334904, \u0026#34;title\u0026#34;:\u0026#34;策划\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;叁咉O3\u0026#34;, \u0026#34;face\u0026#34;:\u0026#34;http://i2.hdslb.com/bfs/face/a2937c10f1b73f3e044f71e8561b8d065e5cd55a.jpg\u0026#34;, \u0026#34;vip\u0026#34;:{ \u0026#34;type\u0026#34;:2, \u0026#34;status\u0026#34;:1, \u0026#34;due_date\u0026#34;:1627833600000, \u0026#34;vip_pay_type\u0026#34;:1, \u0026#34;theme_type\u0026#34;:0, \u0026#34;label\u0026#34;:{ \u0026#34;path\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;text\u0026#34;:\u0026#34;年度大会员\u0026#34;, \u0026#34;label_theme\u0026#34;:\u0026#34;annual_vip\u0026#34;, \u0026#34;text_color\u0026#34;:\u0026#34;#FFFFFF\u0026#34;, \u0026#34;bg_style\u0026#34;:1, \u0026#34;bg_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;border_color\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;avatar_subscript\u0026#34;:1, \u0026#34;nickname_color\u0026#34;:\u0026#34;#FB7299\u0026#34;, \u0026#34;role\u0026#34;:3, \u0026#34;avatar_subscript_url\u0026#34;:\u0026#34;http://i0.hdslb.com/bfs/vip/icon_Certification_big_member_22_3x.png\u0026#34; }, \u0026#34;official\u0026#34;:{ \u0026#34;role\u0026#34;:7, \u0026#34;title\u0026#34;:\u0026#34;音乐人叁咉\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;type\u0026#34;:0 }, \u0026#34;follower\u0026#34;:3874, \u0026#34;label_style\u0026#34;:0 }, { \u0026#34;mid\u0026#34;:78859, \u0026#34;title\u0026#34;:\u0026#34;作曲\u0026#34;, \u0026#34;name\u0026#34;:\u0026#34;烂兔子P\u0026#34;, \u0026#34;face\u0026#34;:\u0026#34;http://i1.hdslb.com/bfs/face/51fa43d2c79bce141242b73745072f04339fb1af.jpg\u0026#34;, \u0026#34;vip\u0026#34;:{ \u0026#34;type\u0026#34;:1, \u0026#34;status\u0026#34;:0, \u0026#34;due_date\u0026#34;:1602259200000, \u0026#34;vip_pay_type\u0026#34;:0, \u0026#34;theme_type\u0026#34;:0, \u0026#34;label\u0026#34;:{ \u0026#34;path\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;text\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;label_theme\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;text_color\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;bg_style\u0026#34;:0, \u0026#34;bg_color\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;border_color\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;avatar_subscript\u0026#34;:0, \u0026#34;nickname_color\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;role\u0026#34;:0, \u0026#34;avatar_subscript_url\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;official\u0026#34;:{ \u0026#34;role\u0026#34;:7, \u0026#34;title\u0026#34;:\u0026#34;音乐领域优质UP主\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;type\u0026#34;:0 }, \u0026#34;follower\u0026#34;:16255, \u0026#34;label_style\u0026#34;:0 } ], \u0026#34;user_garb\u0026#34;:{ \u0026#34;url_image_ani_cut\u0026#34;:\u0026#34;http://i0.hdslb.com/bfs/garb/item/f118b57e21d94302baff903afa9a83ede90f6e07.bin\u0026#34; } } } 有用的就是 pic 字段了\n那么，开搞\n二、Python 实现 随便写了个代码\n1 2 3 4 5 6 7 8 9 10 11 12 import json import requests import os import sys # 主程序 if __name__ == \u0026#34;__main__\u0026#34;: bvid = input(\u0026#39;视频BV号:\u0026#39;)#获取视频BV号 info = requests.get(\u0026#39;https://api.bilibili.com/x/web-interface/view?bvid=\u0026#39;+bvid).text info = json.loads(info) cover = info[\u0026#39;data\u0026#39;].get(\u0026#39;pic\u0026#39;) print(cover) 输出成功\nPS:《噬光者与发光体的爱情》真的好听！！！！Meumy 我吹爆！！！！\n接下来写输出 先写了封面文件夹检测 1 2 3 def mkcoverdif(): if not os.path.isdir(\u0026#39;cover\u0026#39;): os.mkdir(\u0026#39;cover\u0026#39;) 用 requests 写了图片保存的函数 1 2 3 4 def imgdownload(url,name): cover = requests.get(url) with open(\u0026#39;./cover/\u0026#39;+name+\u0026#39;.jpg\u0026#39;, \u0026#39;wb\u0026#39;) as pic: pic.write(cover.content) 获取一些必要信息 1 2 3 cover = info[\u0026#39;data\u0026#39;].get(\u0026#39;pic\u0026#39;) # 封面地址 title = info[\u0026#39;data\u0026#39;].get(\u0026#39;title\u0026#39;) # 视频标题 bvid = info[\u0026#39;data\u0026#39;].get(\u0026#39;bvid\u0026#39;) # 返回的正确格式BV号 这是直接写入主程序块的\n完整代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 import json import requests import os import sys import codecs import re def mkcoverdir(): if not os.path.isdir(\u0026#39;cover\u0026#39;): os.mkdir(\u0026#39;cover\u0026#39;) def imgdownload(url,name): cover = requests.get(url) with open(\u0026#39;./cover/\u0026#39;+name+\u0026#39;.jpg\u0026#39;, \u0026#39;wb\u0026#39;) as pic: pic.write(cover.content) def av2bv(av): info = requests.get(\u0026#39;https://api.bilibili.com/x/web-interface/view?aid=\u0026#39;+av).text info = json.loads(info) if info.get(\u0026#39;code\u0026#39;) == 0: vid = info[\u0026#39;data\u0026#39;].get(\u0026#39;bvid\u0026#39;) # 返回的正确格式BV号 return vid else: print(\u0026#34;找不到该AV号\u0026#34;) print(\u0026#34;CODE:\u0026#34;+str(info.get(\u0026#39;code\u0026#39;))+\u0026#34; MESSAGE:\u0026#34;+info.get(\u0026#39;message\u0026#39;)) return 1 def bvcheck(vid): if vid.startswith(\u0026#39;BV\u0026#39;,0,2) or vid.startswith(\u0026#39;bV\u0026#39;,0,2) or vid.startswith(\u0026#39;Bv\u0026#39;,0,2) or vid.startswith(\u0026#39;bv\u0026#39;,0,2): if len(vid) == 12: info = info = requests.get(\u0026#39;https://api.bilibili.com/x/web-interface/view?bvid=\u0026#39;+vid).text info = json.loads(info) if info.get(\u0026#39;code\u0026#39;) == 0: return True else: print(\u0026#34;找不到该BV号\u0026#34;) print(\u0026#34;CODE:\u0026#34;+str(info.get(\u0026#39;code\u0026#39;))+\u0026#34; MESSAGE:\u0026#34;+info.get(\u0026#39;message\u0026#39;)) return False else: print(\u0026#39;这不是一个合法的BV号, BV号应为12位字符串\u0026#39;) return False else: print(\u0026#39;这不是一个合法的BV号，BV号应为 BV 开头\u0026#39;) return False def main(): valid = True mkcoverdir() print(\u0026#34;请选择 AV号 / BV号\u0026#34;) print(\u0026#34;1.AV号 2.BV号\u0026#34;) status = input() if status == \u0026#39;1\u0026#39;: vid = input(\u0026#39;AV号:\u0026#39;) vid = re.sub(\u0026#39;av\u0026#39;, \u0026#39;\u0026#39;, vid, flags=re.IGNORECASE) if vid.isdigit(): vid = av2bv(vid) if vid == 1: valid = False else: print(\u0026#39;这不是一个合法的AV号\u0026#39;) valid = False if status == \u0026#39;2\u0026#39;: vid = input(\u0026#39;视频BV号:\u0026#39;)#获取视频BV号 if status == \u0026#39;1\u0026#39; or status == \u0026#39;2\u0026#39;: if valid: if bvcheck(vid): info = requests.get(\u0026#39;https://api.bilibili.com/x/web-interface/view?bvid=\u0026#39;+vid).text info = json.loads(info) bvid = info[\u0026#39;data\u0026#39;].get(\u0026#39;bvid\u0026#39;) # 返回的正确格式BV号 cover = info[\u0026#39;data\u0026#39;].get(\u0026#39;pic\u0026#39;) # 封面地址d title = info[\u0026#39;data\u0026#39;].get(\u0026#39;title\u0026#39;) # 视频标题 if status == \u0026#39;1\u0026#39;: vid = \u0026#34;av\u0026#34;+str(info[\u0026#39;data\u0026#39;].get(\u0026#39;aid\u0026#39;)) #返回的正确格式AV号 if status == \u0026#39;2\u0026#39;: vid = info[\u0026#39;data\u0026#39;].get(\u0026#39;bvid\u0026#39;) # 返回的正确格式BV号 # print(title+\u0026#39; - \u0026#39;+bvid+\u0026#34;: \u0026#34;+cover) print(\u0026#39;完成!\u0026#39;) # 提示一下 print(\u0026#34;保存文件名:\u0026#34;+title+\u0026#39; - \u0026#39;+vid+\u0026#34;.jpg\u0026#34;) imgdownload(cover,title+\u0026#39; - \u0026#39;+vid) # 下载 else: print(\u0026#34;这不是一个合法的状态码\u0026#34;) # 主程序 if __name__ == \u0026#34;__main__\u0026#34;: main() os.system(\u0026#39;pause\u0026#39;) 自己加了 AV 号与 BV 号的判断，如果是 AV 号就把 AV 转换成 BV 再用 BV 手法去找封面\n然后根据选择的类型进行保存\n运行一下 Done！\n四、后记 这玩意没啥好说的。。。\n唯一的缺点就是没有写 AV 号的获取和 BV 号格式检测吧。。\n","date":"2022-10-23T00:00:00Z","image":"https://yurik.cafe/p/get-bilibili-album/banner_hufe074a0d0401dbaceb5582eac69e6765_380970_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/get-bilibili-album/","title":"获取B站视频封面"},{"content":"假期咯，是时候折腾一些新玩意啦！\n假期开始的时候在一个同学家玩（下面叫他叫兽），突然有一天他说：“再过几周我想和你研究一下怎么写网页（HTML），顺便学学怎么搭建服务器。”\n“服务器嘛，你自己用一台电脑开就好了。”\n但我真的想要一台服务器啊 QwQ\n回到家我越想越睡不着，越想越睡不着\n于是我\n开箱 U1S1，这玩意是真的沉。顺丰小哥推着一个推车帮我推上来的，辛苦了 Orz\n顺丰小哥：你买了什么啊，这么沉？\n商家发的真的结实，除了泡沫外顶上还有一层防摔垫\n（由于没有图，就不放了 QWQ，大家看看上面的说说吧\niDRAC YYDS？ 得益于戴尔强大的 iDRAC 助力，使安装系统变成了一件 极其容易 的事\n—— 景蓝 Yurik\n这是我问云资后得出的初结论\n真的吗？\n这件事可能对于一台新的 Dell 服务器来说，易如反掌，但对于这样一台二手服务器，却花费了我和云资一个下午\n首先，服务器需要在原先网口的基础上再连接 iDRAC 的网口（也就是两根网线）\n我的解决方案是 PDD 58 元的 水星 5 口全千兆交换机\n一开始，iDrac 的默认地址一直无法连接(https)\n重置之后 Edge 浏览器便提示\n使用不受支持的协议\nERR_SSL_VERSION_OR_CIPHER_MISMATCH\n无论是 Chrome Firefox 还是 Edge 即使进入 Windows 设置支持 SSL 3.0 后仍于事无补\n最后解决方案是使用 Edge 的 IE 模式访问（没想到 IE 还是蛮有用的）\n点亮 既然进入的 iDRAC，我们就启动虚拟控制台吧\n点击 虚拟介质-\u0026gt;连接虚拟介质\n等待连接后点 虚拟介质-\u0026gt;映射 CD/DVD，选择 ISO 镜像，选择系统镜像\n选择 下次引导-\u0026gt;虚拟 CD/DVD/ISO\n电源-\u0026gt;系统关机后再开机（冷引导）\n重启后就和正常安装系统一样了\n我安装了 Proxmox Virtual Environment ( PVE ),这样可以在一台设备上跑多个系统，ALL IN ONE YYDS!\n截图时候还在装着 Centos 用来跑 Rimetown 的 主要服务\n后来还装了一个 OpenMediaVault 来做 Nas\n注意 二手服务器到了之后一定要去 BIOS 里面重置一下 iDRAC 设置，并且最好不要让 iDRAC 使用 DHCP 获取 IP，自己指定一个会方便很多\n购买服务器后的部分问题 \u0026amp; 可能有用的解决方案 风扇开机后一直全功率运行 进入 BIOS 里面的 System BIOS Settings -\u0026gt; System Profile Settings 里面检查一下 C1E 有没有设置成 Enabled\n设置成 Enabled 后重启，说不定就好了\n实在不行就只能用dell_fans_controller (Windows 推荐) 或者 ipmitool (上手成本较高)来手动调速了，具体方法自行百度\n别忘了开启主机的 IPMI\n配置 硬件 型号 数量 CPU E5-2690 v2 2 内存 DDR3 8G REG ECC 1333 4 硬盘 2T SAS 2 网卡 四千兆网口 1 阵列卡 H310 Mini 1 小插曲 我的配置单中是双路 750W 的电源，但是卖家发错成了双 495W 的电源了\n我找完客服之后立马给我打电话联系我补发，原先的 495W 就送我了\n商家真的蛮好的\n但是我的博客里面就不打广告，不提店名啦\n结语 这一套配置说不上好，只是我第一次捡服务器（洋垃圾）的尝试\n谢谢你看了那么多 Orz\n总的来说，戴尔的服务器还是十分优秀的，iDRAC 简直就是服务器管理的神器！\n就靠他陪伴我和即将开服的Rime Town 度过未来的日子啦!\n话说还是期待着换 R730 或者 R740 的说\u0026hellip;\n晒图 ","date":"2022-07-30T00:00:00Z","image":"https://yurik.cafe/p/dell-poweredge-r720-review/photo-3_hu00d2e5b14078aa9ebefd76a0389cc3c8_95018_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://yurik.cafe/p/dell-poweredge-r720-review/","title":"戴尔 PowerEdge R720 上手 : 年轻人的第一台家庭服务器"},{"content":"前言 夏天到了，又到了暑假的季节，是时候学一点新新的技术术啦！\n之前一直用的是酷 Q 作为机器人框架，可惜因为一些原因，酷 Q 关闭了自己的官网，原先的免费版也无法再次登录，于是我便打算自己写一个 QQ 机器人\n在互联网上一顿搜索过后，我找到了go-cqhttp，一个 QQ 机器人框架\ngo-cqhttp 支持HTTP API 和 HTTP POST多点上报，那么我们就可以用 python + flask 来制作一个最简单自动回复 QQ 机器人\n有意思的事情，即将发生\n环境搭建 首先我们肯定要登录机器人账号\n具体步骤请参考基础教程\n然后就是 Python 环境\n使用 pip 安装以下库\nrequests - 与 go-cqhttp 交互\nflask - 接受 go-cqhttp 上报信息\n这两个是基础库，其余根据自己代码的编写自行安装\nStart 开始！ ","date":"2022-07-08T00:00:00Z","image":"https://yurik.cafe/p/qqbot-dev-1/banner_hu28c59544680010fae30152def9654cc9_242684_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/qqbot-dev-1/","title":"cqhttp-go - 便捷开发自己的QQ机器人（一）"},{"content":"好久没碰过C++了，也好久没碰竞赛了\n今天突然想起来去洛谷注册了个账号（（（\n从入门题库中看到了这道入门题\n觉得蛮有意思的，就记一下过程\n题目 原题：洛谷 - P1425 小鱼的游泳时间\n题目描述 伦敦奥运会要到了，小鱼在拼命练习游泳准备参加游泳比赛，可怜的小鱼并不知道鱼类是不能参加人类的奥运会的。\n这一天，小鱼给自己的游泳时间做了精确的计时（本题中的计时都按24小时制计算），它发现自己从a时b分一直游泳到当天的c时d分，请你帮小鱼计算一下，它这天一共游了多少时间呢？\n小鱼游的好辛苦呀，你可不要算错了哦。\n输入格式 一行内输入 4 个整数，分别表示 a, b, c, d。\n输出格式 一行内输出 2 个整数 e 和 f，用空格间隔，依次表示小鱼这天一共游了多少小时多少分钟。其中表示分钟的整数 f 应该小于60。\n输入输出样例 输入 #1\n1 12 50 19 10 输出 #1\n1 6 20 说明/提示 对于全部测试数据，0 ≤ a,*c *≤ 24，0 ≤ b,d ≤ 600 ≤ b,d ≤ 60，且结束时间一定晚于开始时间。\n解题 很显然，这就是一个数学问题：怎么通过时间格式计算间隔\n1.通过计算将时间统一到所需最小单位 - minute\n2.通过取整，取余计算获得结果\nAC代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include\u0026lt;iostream\u0026gt; #include\u0026lt;cstdio\u0026gt; using namespace std; int a,b,c,d; int main() { cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;c\u0026gt;\u0026gt;d; int allminute = 60*(c-a-1)+(60-b)+d; int hours = allminute / 60; cout\u0026lt;\u0026lt;hours; cout\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;allminute %60; return 0; } ","date":"2022-04-01T00:00:00Z","image":"https://yurik.cafe/p/luogu-p1425/banner_hu96787a4d895d302f8a00aaa514122a2c_24966_120x120_fill_box_smart1_3.PNG","permalink":"https://yurik.cafe/p/luogu-p1425/","title":"P1425 - 小鱼的游泳时间"},{"content":"RT\n","date":"2022-03-05T00:00:00Z","image":"https://yurik.cafe/p/thanks-to-norphin/banner_hu1de2d7714bed2d2b2ffdf612620af47e_315107_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/thanks-to-norphin/","title":"谢谢你，我的宝😘"},{"content":"〇、Scoop 是什么 Scoop 是一款在 Windows 上的包管理器\nQ：什么是包管理器？ A：简单来说，“包管理器”（或“软件包管理器”）是一种工具，它允许用户在操作系统上安装、删除、升级、配置和管理软件包。软件包管理器可以是像“软件中心”这样的图形化应用，也可以是像 apt-get 或 pacman 这样的命令行工具。\n来自https://linux.cn/article-12713-1.html\nQ:为什么选择 Scoop（Scoop 有什么优点） 仍在维护\n不依赖管理员权限\n防止安装大量程序造成的 PATH 污染\n避免了安装和卸载程序的意外副作用\n自动查找和安装依赖项\n自己执行所有额外的安装步骤，以获得一个工作程序\n翻译自Scoop 的 README 文件\n一、安装 scoop win + r 打开运行窗口\n输入Powershell\n在打开的窗口中输入\n1 iwr -useb get.scoop.sh | iex 或者\n1 Invoke-Expression (New-Object System.Net.WebClient).DownloadString(\u0026#39;https://get.scoop.sh\u0026#39;) 如果您收到错误，您可能需要更改执行策略（即启用 Powershell）\n1 Set-ExecutionPolicy RemoteSigned -scope CurrentUser 当 Powershell 显示\u0026quot;Scoop was installed successfully!\u0026ldquo;时，即代表你的 scoop 已安装完成\n","date":"2022-02-13T00:00:00Z","image":"https://yurik.cafe/p/install-scoop/banner_hubea6019bcf18dd1c525f8cdd3b57672f_27019_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/install-scoop/","title":"Scoop - 一款强大的Windows包管理工具"},{"content":"〇、前言 0.1 我为什么选择 Hugo Hugo 是一个使用Go语言编写的静态网站生成器。 长期续费一个稳定的虚拟主机的费用是昂贵的，因此我放弃了原先的Typecho系统，转而寻找静态博客系统。在尝试了Hexo、Jekyll后，我选择了Hugo，原因首先是它支持 Markdown 语法，这使得我将文章从 Typecho 迁移至 Hugo 变得容易，其次是Stack主题仅适用于 Hugo (搭建博客第一要领：好看)\n0.2 网页托管 说起网页托管，大家第一想到的大概都是Github Pages吧，最初我也是使用 gh 来对生成的动态页面进行托管，可长期使用下来我发现 gh pages 存在一些问题：\ngithub pages 会对绑定的域名进行 cname 验证，而 Cloudflare 默认将主域名的 CNAME 拉平成 A 解析，这导致我的域名一周多了还没有通过验证 Github Pages 默认给每个域名申请免费的 SSL 证书，而我的一个域名出现了 SSL 证书出错的情况 😓，最后也没排查出是域名还是 gh pages 的问题 可能会有 DNS 污染导致 github.io 无法访问 不支持 PHP，导致我原先的一些脚本无法使用 为了解决这些问题，我在知乎游了一圈，发现了一个宝藏部署服务：Vercel\nVercel 有以下优点：\n访问速度比 Github Pages 快\n比 Github Pages 稳定\n自带 SSL 证书\n支持将域名 DNS 服务器迁移至 Vercel\n放一张 Github Pages 与 Vercel 速度对比图（左：Gh Pages | 右：vercel） 数据、地图来自 站长工具 \u0026gt; 国内网站测速\nVercel 比 GhPages 绿多了（逃\n一、准备工作 1.1 安装 Hugo 本文仅展示使用 Windows 安装 Hugo\n本教程中使用 scoop软件包管理器 安装\n其余方法大同小异，请自行使用搜索引擎搜索\n安装 scoop，请看这篇文章：Scoop - 一款强大的 Windows 包管理工具\nwin + r 打开运行窗口\n输入Powershell\n在打开的窗口中输入\nscoop install hugo\n或者用以下方式安装扩展版本\nscoop install hugo-extended\n当控制台显示\u0026lsquo;hugo\u0026rsquo; (0.92.2) was installed successfully!时代表安装已完成\n若选择安装拓展版本，则当显示\u0026lsquo;hugo\u0026rsquo; (0.92.2) was installed successfully!时代表安装已完成\n括号内版本号以最新版本为准\n1.2 创建站点 1.2.1 初始化站点 在控制台中输入hugo new site 路径新建一个站点\n如hugo new site E:\\myblog\n这个命令将在 E 盘中创建一个名为 myblog 的目录并在此中创建一个新的 hugo 站点\n1.2.2 安装主题 由于新站点中无主题，因此无法渲染，所以我们需要安装一个新主题\n在本文中选择从 hexo 移植的Next 主题\n进入站点根目录后，使用 git 获取主题\ngit clone https://github.com/elkan1788/hugo-theme-next.git themes/hugo-theme-next\n复制站点根目录/theme/hugo-theme-next/exampleSite 中的文件并粘贴至站点根目录后覆盖\n运行hugo server\n恭喜你，你的 hugo 博客已成功运行\n1.2.3 自定义博客 待完成\u0026hellip;..\n","date":"2022-02-13T00:00:00Z","image":"https://yurik.cafe/p/hugo-blog/banner_hu145ed520fac9f2d3a2088f570693d3d3_25983_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/hugo-blog/","title":"使用Hugo搭建个人博客"},{"content":"原文链接：PRIN BLOG - 又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API\n共享协议：本文与原文采用相同的 CC BY 4.0 协议而非本博客默认的共享协议\n最近给 Blessing Skin 写了个插件，利用皮肤站本身的账号系统实现了 Yggdrasil API（就是 Mojang 的登录 API），然后配合 authlib-injector 这个项目将启动器（基于 Java 编写的支持正版登录的启动器都行）、Minecraft 游戏、Minecraft 服务端中的 Mojang Yggdrasil API 地址给替换成了自己实现的第三方 Yggdrasil API 地址（字节码替换），从而实现了与正版登录功能几乎完全相同的账户鉴权系统。\n通俗地讲，就是我把 Mojang 的正版登录 API 给【劫持】成自己的啦，所以可以像登录正版那样直接用皮肤站的邮箱和密码登录游戏（还支持 Mojang 都不支持的多用户选择哦）。这种外置登录系统的实现应该可以说是比市面上的软件都要完善（毕竟可以直接利用 Minecraft 本身自带的鉴权模块），因此写一篇博文介绍一下这些实现之间的不同之处，顺带记录一下实现 Yggdrasil API 时踩到的坑，算是抛砖引玉了。\n注意：本文不适合小白及问题解决能力弱的人群阅读。\n感觉我明明好久没玩 MC 了，要玩也都是玩正版服务器，但是却一直在搞这些盗版服用的东西，我真是舍己为人造福大众普惠众生啊（不\n一、服务器内置登录插件 相信维护过 Minecraft 服务器（当然，我这边说的是运行在离线模式下的服务器）的腐竹们或多或少都听说过 Authme、CrazyLogin 等登录插件的鼎鼎大名吧。由于这些服务器运作在离线模式（online-mode=false，即俗称的盗版模式）下，缺少 Mojang 官方账户认证系统的支持，所以必须使用这类插件来进行玩家认证（否则随便谁都可以冒名顶替别人了，换一个登录角色名就行）。\n这类插件的工作原理就是在服务端维护一个数据表，表中每一条记录中存储了角色的「角色名」、「登录密码」、「注册时间」、「登录 IP 地址」等等信息，当玩家初次进入服务器时需要通过这些插件进行注册操作（e.g. /register 命令）并在表中插入一条记录，注册完毕后进入服务器则需要输入密码（e.g. /login \u0026lt;password\u0026gt; 命令）来认证。\n其实这样的解决方案也没什么不好，而且现在 Authme 等登录插件在众多的服务器中都还是主流。但是，如果你的服务器已经发展到比较大型了，或许你就比较希望有这样一个东西：\n可以直接在启动器中进行登录鉴权操作，点击「开始游戏」就可以直接进入服务器，不用在游戏里再一遍遍输入 /login 等指令； 有一个网页版的用户管理，可以直接对玩家进行操作（e.g. 封禁、修改积分）； 玩家们可以直接在一个直观的网页上注册账号，并且可以直接用这个账号 \u0026amp; 密码登录游戏； 希望这个账号系统还能对接论坛、皮肤站等乱七八糟的东西，玩家注册了一个账号之后，可以在任何地方使用； 希望服务器有一个自己的网页、自定义启动器、用户管理系统、卫星地图之类的东西来装逼； etc. 并不是所有腐竹都满足于 Authme + Discuz 这样的组合的（而且这类游戏内登录系统也有不少安全漏洞），毕竟在这个 Minecraft 多人联机服务器发展接近饱和的时候，如果想要你的服务器能够吸引新玩家，那么除了服务器本身建设之外的地方也是要好好考虑的。\n二、外置登录系统 正是这样的需求催生了不少 Minecraft 的「外置登录插件」、「网页登录」等等软件（而且人气都挺高的），我随手在 MCBBS 上一搜就有很多类似的产品，用啥语言写的都有：MadAuth、WebLogin、BeeLogin、WebRegister、冰棂登陆系统……\n这些软件的原理就是将原本的登录鉴权这一步骤从游戏里抽出来了，将其放到启动器 or 网页上去，而服务端插件的功能就只剩下「查询数据库中用户的登录状态，决定是否放行」：\n▲ 随手画的示意流程图，这里推荐一下 ProcessOn 这个在线作图网站，很好用 ;)\nPrintempw 的图是透明的，对灯箱显示不是很友好，所以就自己上了一层白色底\n似乎也挺好的，不是吗？那我今天要说的「自行实现 Yggdrasil API」方法，和这些现成的方式有什么不一样呢？\n三、自行实现 Yggdrasil API 继续看下去之前，首先你要知道 Mojang 正版的 Minecraft 是怎样登录的。Mojang 专门定义了一个用于鉴权的 API，Mojang 旗下的游戏（Minecraft、Scrolls 等）都是用的这一套 API 来正版验证的 —— 这一套 API 的名字就叫做 Yggdrasil（即北欧神话里的世界树，这名字可真几把炫酷）。\n正版登录的好处就不用我说了吧？再也不用担心假人压测、自带外置登录（启动器里账号密码登录）、自带皮肤加载（不需要安装 CSL、USM 等皮肤补丁了）、Tab 栏显示头像……可以说，Minecraft 自带的 Yggdrasil API 鉴权系统比上面的那些什么登录插件啊什么外置登录的功能强多了，所以正版服务器（online_mode=true）也不用担心那些破事，因为官方的这一套鉴权系统以及很完善了。\n那么问题来了，盗版用户要怎样才能把 Mojang 为正版开发的 Yggdrasil API 系统拿来用呢？\n3.1 基本原理 这里必须感谢 to2mbn/authlib-injector 这个项目，正是因为这个项目，我接下来描述的方法才成为可能。是的，方法很简单，Minecraft 虽然把 Mojang 官方的 Yggdrasil API 地址（https://authserver.mojang.com）给写死在源码里了，但是既然 Minecraft 是基于 JVM 的应用程序，我们就可以通过字节码替换的方法将官方的 API 地址替换成我们自己实现的 API 地址。\n以下内容援引自 authlib-agent（即 authlib-injector 前身）的 wiki：\nauthlib-agent 是一个高可靠性, 高适用性, 用于 Minecraft 的, 游戏外登录及皮肤解决方案. 支持 Minecraft1.7+, Craftbukkit, Spigot, Bungeecord 等. 通过对正版登录 API 的重定向, 实现了一个功能和正版几乎一样的游戏外登录系统.\n不过既然要把官方 API 地址替换成我们自己的，我们就得自己实现一个和官方 API 其他地方都一样的 API，也就是，仿造出一个第三方 Yggdrasil API 出来。\n3.2 解决方案 可以说这个系统中，就是「开发完整实现了 Yggdrasil API 的后端」这一步最难了。为啥捏？这个服务端不止要实现用户的认证、皮肤获取，你还得实现用户的注册、登录、角色管理、皮肤上传、皮肤库等等七七八八的功能吧？你还得给这些功能套上一个好看的界面吧，不然你让你的玩家怎么使用？你还得来个后台管理页面吧，不然管理员怎么进行用户管理、封禁等操作？\nauthlib-injector 官方也提供了一个 Java 编写的后端 yggdrasil-mock，虽然完整实现了 Yggdrasil API，但是它并没有提供直观的管理网页，只提供了一套 RESTful API，所以距离实装要求还是差得比较远的。\n要重头开发一套这样的系统是非常非常够呛的，不过幸运的是，我之前一直在持续开发的 Minecraft 皮肤站 Blessing Skin Server，这个项目的 v3 版本正好就满足的这些要求 —— 友好的用户界面、完善的用户系统、强大的后台管理、附带皮肤上传管理展示功能，再加上我之前开发的插件系统（开发这玩意真是个正确的决定，一劳永逸啊），这让我可以很方便地开发一个插件出来，直接基于现成的皮肤站用户系统实现 Yggdrasil API。\n3.3 如何使用 讲了那么多，那么到底该怎么使用呢？\n请参阅：printempw/yggdrasil-api wiki。\n以上步骤完成后你将得到什么？\n一个完善的账号系统（配合数据对接插件还能与 Discuz 等论坛账号互通），包括友好的注册、登录网页界面以及强大的管理员面板，在管理后台中封禁用户后，该用户也将无法登录游戏； 一个皮肤管理系统，自带皮肤库功能，在皮肤站中应用的皮肤，玩家无需安装任何皮肤 Mod，进入游戏即可看到自己设置的皮肤（支持双层皮肤、支持 Alex 模型，由于游戏本身限制不支持高清皮肤）； 单账户多角色功能，玩家可以像登录正版那样用「邮箱」和「密码」登录游戏，而且如果你在皮肤站中添加了多个角色的话，还可以在启动页面选择要用哪个角色进入游戏（Yggdrasil API 实现了这个功能，但是 Mojang 的正版登录服务器并未实现该功能），HMCL 等启动器都实现了本功能； 这还不够多吗？\n而且你还可以自己修改 HMCL 等开源启动器的源码，在启动时自动注入 -javaagent 参数，更加方便，还能得到一个服务器专用启动器，逼格更高了（笑）\n3.4 实现效果 皮肤站的用户管理系统、皮肤系统、后台界面之类的我就不截图了，有兴趣可以去 MCBBS 的 发布帖 上感受一下。\n▲ 在皮肤站「角色管理」中可添加多个角色\n▲ 使用皮肤站的邮箱与密码登录后，配合 HMCL 实现多角色选择\n▲ 游戏内的显示效果\n四、Yggdrasil API 踩坑记录 下面记录一些自己实现 Yggdrasil API 时踩到的坑，毕竟 wiki.vg 里并不会提到这些在自己实现 API 时需要注意的东西（提到的大部分都是使用 API 时应该要注意的），所以我也只能摸着石头过河，踩了不少坑，这里记录一下，希望能帮到后来人。\n基础的 API 定义之类的我就不说了，下面主要讲一些 文档 里没怎么提到的东西。\n2018-02-22 加注：\n最近 @yushijinhun 写了一篇 Yggdrasil 服务端技术规范，大部分 API 相关的内容其中都有提及，大家去看那个就好了。\n4.1 登录与鉴权 用过正版 Minecraft 的登录系统的同学应该都知道，一般只有在初次登录游戏或者太久没有开过游戏的情况下，启动器才会要求你输入账号密码，其他情况下都是可以直接点击登录并启动游戏的。\n但这并不是因为启动器记下了你的密码，相反，启动器保存的是 Mojang 认证服务器返回的 AccessToken。如果你曾经观察过启动器启动游戏时所用的启动参数，你就能发现其实 Minecraft 游戏本体其实只拿到了角色名、角色 Profile 对应的 UUID 以及上面提到的 AccessToken 而已。可以说，只要拿到这个 AccessToken 就可以进行几乎所有的操作了。\n1 2 3 --username 621sama --uuid d3af753b7cda4666adc2ff9bba85e0eb --accessToken cc1e7c7d-00ab-4f37-bbe1-983e18f1755d 4.1.1 获取 AccessToken 用正确的 username 和 password 请求 /authenticate API 即可拿到 AccessToken，该令牌的有效期由服务端来决定（一般用 Redis 实现）。如果你请求 API 的时候没有带上 clientToken，那服务端就会帮你生成一个，你要记得把这个返回值记下来，因为 clientToken 和 accessToken 是对应关系，有些 API 是要求同时提供 AccessToken 和签发该令牌的 clientToken 的。\n另外需要注意的是，这个 /authenticate API 中请求体中的 username 字段，填的是邮箱。\n是的，你没听错，email，在 username 字段里填的是用户的 email。惊不惊喜，意不意外？这个狗屎一样的字段命名估计和历史遗留问题也有关系，因为早期 Minecraft 账号（也就是 Profile 里的那个 legacy 字段）是直接用**「角色名」和「密码」登录的，但是新版 Mojang 账号（Yggdrasil API）认证是用的「电子邮箱账号」**，Yggdrasil API 为了兼容旧账号的登录，所以搞了这么一个坑爹的东西，真是说不出话。\n总之，如果想要自己实现 Yggdrasil API，是要注意一下这个神秘的 username 字段的。\n4.1.2 刷新 AccessToken 在登录成功拿到 accessToken 后，启动器应该把这个令牌存起来，然后在每次玩家登录游戏之前请求一次 /refresh API，提供 accessToken 和签发该令牌时用的 clientToken（这也是我为什么上面叫你要把这个存起来的原因），就可以拿到新签发的 accessToken 了（刷新令牌有效期）。只要令牌有效期没过，启动器就不会再次请求 /authenticate API。\n所以，虽然文档上没说，但是其实 /refresh 返回的结果应该是要和 /authenticate 的返回结果大致相同的，包括 accessToken、clientToken、availableProfiles、selectedProfile、user 等字段（具体下面再说）。\n4.2 API 中的 Token Yggdrasil API 的定义中主要有两个 Token，clientToken 与 accessToken，两者为对应关系。一般来说，启动器不会频繁变动 ClientToken（通常情况下，是永远不会变的），而 AccessToken 应该在每次登录游戏时通过 /refresh 重新签发一个。\n4.2.1 Token 的生命周期 需要注意的是，AccessToken 是有生命周期的，大致如下：\n1 2 |---- 1. 有效 ----|---- 2. 暂时失效 ----| 3. 无效 |------------------------------------------------------\u0026gt; Time AccessToken 刚签发时处于「有效」状态，经过一段时间后（服务端自行设置）变成「暂时失效」状态。在这种状态下的 AccessToken 是无法进入任何开启了正版验证的服务器的（也就是 /join API 不认），但是该令牌还是能拿来请求 /refresh API，这会签发一个全新的处于「有效」状态的 AccessToken 并返回给客户端。\n但是如果处于「暂时失效」状态的 AccessToken 再放置一段时间后就会完全失效（一般的实现就是从 Redis 令牌桶中删掉该令牌），处于「无效」状态的 AccessToken 是无法进行任何操作的，只能让用户重新输入密码并请求 /authenticate API 以获取一个新的 AccessToken。\n4.2.2 Token 的格式 Yggdrasil API 中的 clientToken、accessToken、id 等字段的格式都是一大串 16 进制数字和 - 连字符组成的字符串，让人看起来很懵。其实这样的字符串格式就是 通用唯一识别码（Universally Unique Identifier）标准，也就是我们经常听到的 UUID 了。标准形式的 UUID 包含 32 位 16 进制数字，并且由连字符分割成形式为 8-4-4-4-12 的字符串，就像这样：\n1 2 # 至于如何生成 UUID，各个语言一般都有对应的库，搜一下就有了 550e8400-e29b-41d4-a716-446655440000 虽然文档中没说，但是 API 请求以及响应的 clientToken 、accessToken 以及玩家 Profile 中的 id 字段格式都是**【不带连字符的 UUID】**。下面拿 wiki.vg 中的 /authenticate 请求中的实例响应讲解一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { // 不带连字符的 UUID 格式 \u0026#34;accessToken\u0026#34;: \u0026#34;869a97cb2bc841be84bfd668c299a718\u0026#34;, // 无符号 UUID，与 accessToken 对应 \u0026#34;clientToken\u0026#34;: \u0026#34;c0b2bac2eb434af5ae8ae7f824cee02f\u0026#34;, \u0026#34;availableProfiles\u0026#34;: [ { // 无符号 UUID，下同 \u0026#34;id\u0026#34;: \u0026#34;d3af753b7cda4666adc2ff9bba85e0eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;621sama\u0026#34; } ], \u0026#34;selectedProfile\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;d3af753b7cda4666adc2ff9bba85e0eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;621sama\u0026#34; }, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;d3af753b7cda4666adc2ff9bba85e0eb\u0026#34;, \u0026#34;properties\u0026#34;: [] } } 至于后端存储时用怎样的格式就随意了，不过在 API 返回结果中是一定要按照上面的格式来的。\n4.4 多角色选择功能 虽然 Mojang 官方迄今为止仍未支持同一个账号（Mojang 账号，用邮箱登录的那个）下添加多个角色（角色名，就是游戏里显示的那个），但是 Yggdrasil API 本身是可以实现这个**「单账号多角色」功能的，并且官方启动器、HMCL 等著名的第三方启动器都支持登录后选择角色进入游戏**（具体效果参见上方截图）。\n如果你仔细阅读过 wiki.vg 里的 API 文档的话就会发现，/authenticate 里面有好几个包含了 Profile 的字段，分别是 availableProfiles、selectedProfile 和 user。下面我稍微说一下这几个字段的功能。\n首先，availableProfiles 中存放的是这个账号下所有可用角色的 Profile，格式为 JSON 数组：\n1 2 3 4 5 6 7 8 9 10 \u0026#34;availableProfiles\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;不带连字符的 UUID\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;角色名\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d3af753b7cda4666adc2ff9bba85e0eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;621sama\u0026#34; } ] 需要注意的是，每个角色 Profile 都应该有一个唯一的 id（格式为不带连字符的 UUID），而不是每个账号一个。而且，虽然官方文档上没有写，其实 /refresh API 返回的结果应该和 /authenticate 一样带上 availableProfiles 这个属性（因为只有第一次密码登录才会请求 /authenticate，之后进游戏就只会请求 /refresh 了）。\n而 selectedProfile 字段内容为被选中的角色 Profile。如果这个字段存在，启动器就会直接用这个角色进入游戏。只有在 selectedProfile 字段不存在时，启动器才会弹出「选择角色」对话框，并根据用户的输入选择不同的角色进入游戏。如果你想要搞支持单账户多角色的 API 的话，可以不用管这个字段（不过当该账号名下只有一个角色的话记得指定 selectedProfile ，这样启动器就可以直接用这个角色进游戏了）。\n至于 user 字段是只有在请求时带上了 requestUser 属性时才会回复的，其中包括被选中角色的 UUID、语言偏好、Twitch 的 AccessToken 等等，一般来说，自己实现 Yggdrasil API 时可以忽略这玩意（而且这个属性对单账户多角色的支持并不好）。\n4.5 加载皮肤与披风 这里稍微提一下 Minecraft 使用 Yggdrasil API 时加载皮肤的原理。\n首先你要知道，Minecraft 游戏启动时从启动器那边（i.e. 从命令行）拿到的 API 相关属性只有「AccessToken」、「选中角色的 UUID」以及「选中角色的角色名」这三样东西。获取 Profile 以及加载皮肤是 Minecraft 游戏该做的工作，具体流程如下。\n4.5.1 获取完整 Profile 首先 Minecraft 会请求 API /profiles/minecraft/{uuid} 获取角色的完整 Profile，差不多长这样：\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;id\u0026#34;: \u0026#34;d3af753b7cda4666adc2ff9bba85e0eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;621sama\u0026#34;, \u0026#34;properties\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;textures\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;eyJ0aW1lc3RhbXAiOjE1MDIyMDA5OTAwMjgsInByb2ZpbGVJZCI6ImQzYWY3NTNiLTdjZGEtNDY2Ni1hZGMyLWZmOWJiYTg1ZTBlYiIsInByb2ZpbGVOYW1lIjoiNjIxc2FtYSIsImlzUHVibGljIjp0cnVlLCJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly9za2luLmRldi90ZXh0dXJlcy84MzRjYmQ4NDhmMGEyOTAwOGJmNWIxZDU5ZDAyZWNiMWNmMjVkZmQyMWZjODhiZTFjMTgzYzkyNjFmNWZkZDY5In0sIkNBUEUiOnsidXJsIjoiaHR0cDovL3NraW4uZGV2L3RleHR1cmVzLzI5MTE0MzhlODI4MmQ0MGU2ZDY0ZmJlZmQwNzZlZWYwYTkwMWNiOTBkM2RlYWU0MDU3ZmVjNjBjNjZlYjkzZDIifX0sInNpZ25hdHVyZVJlcXVpcmVkIjp0cnVlfQ==\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;Zvox4YClUMHIAMe1tRLV/JmMaGF0pZhkmrigFpo7jOme8f559gZVyBQoTXeZsXn7Hwq5TE0b9m09MzuAGoT7dQ7kxkHA60xvVQXMQlbWP5O+EA8fzOM0hgINe8Qv7hSBG89osr+wWE7pTJ1CIKD6CBoK1a/U9UiCyQuDlO2gnfnXebBDIXJCBMKiowTu1LubZ9EQn7WkgrFD/M7TY+2dr8DOdoq15Pv0EZ2kLO1Gu9y6vOPq+5nAhce/TN/sWGAvfCJJkSYqALBSFh7QkExTJXPM7QHgP++rn96m6/nDe/ND6NwEovwdVqD5KiPnTvzRLkr92QEdZniT6hH2DUrToA==\u0026#34; } ] } 好吧好吧，看到这么多字符先别懵，value 和 signature 字段的内容都是 BASE64 编码过的，解码后 value 字段就是个普通的 JSON 而已。至于 JSON 里是什么内容，就自己去看 wiki 吧。\n4.5.2 数字签名 需要注意的是上述 Profile 中的 signature 字段。顾名思义，这个字段就是 value 字段的数字签名。虽然官方 API 只有在指定 unsigned=false 时才会返回带签名的 Profile，但是目前（截至本文发布）authlib-injector 在服务端未返回数字签名时会出现神秘的错误，所以还是默认返回 signature 字段来得好。\n至于数字签名如何生成，其实就是用的 OpenSSL 内置的签名算法。各个平台都有 OpenSSL 库的实现，我这里贴一下 PHP 的示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $privateKeyPath = __DIR__.\u0026#39;/key.pem\u0026#39;; // Load private key if (! file_exists($privateKeyPath)) { throw new IllegalArgumentException(\u0026#39;RSA 私钥不存在\u0026#39;); } $privateKeyContent = file_get_contents($privateKeyPath); $key = openssl_pkey_get_private($privateKeyContent); if (! $key) { throw new IllegalArgumentException(\u0026#39;无效的 RSA 私钥\u0026#39;); } openssl_sign($data, $sign, $key); openssl_free_key($key); return base64_encode($sign); 其他语言大同小异，我就不多赘述了。\n4.5.3 加载材质 拿到角色 Profile，并且验证了数字签名后（签名不对的话不会加载的），Minecraft 游戏就会根据 Profile 中指定的皮肤、披风图片 URL 加载材质。需要注意的是，Minecraft 自带的 authlib 是只会加载 Mojang 官方域名下的材质的（白名单之外的材质地址是不会被加载的），这也是为什么需要 CustomSkinLoader 等皮肤 Mod 的原因。不过 authlib-injector 自带了对 authlib 的 hack，在配置文件（或者远程配置加载）中直接指定材质加载白名单即可。\n如果一切正常，游戏内就会显示你的自定义皮肤了。\n4.5 加入服务器 在 Minecraft 中加入一个服务器时，客户端会向 /join API 发出一个请求，请求体中包含了 AccessToken、当前角色的 UUID 以及服务器的唯一标识符 serverId（这玩意如何生成不用我们操心，Minecraft 游戏里会搞好的，你只管存这个就行了）。\n在后端实现上，一般来说就是在 Redis 这类内存数据库中放一个键值对，具体数据结构你自己想。\n向 Yggdrasil API 发送完 join 请求后，Minecraft 客户端会向要加入的那个游戏服务器发送一个请求（这部分我们不用操心），服务器收到加入请求后，会向 Yggdrasil API 发送一个 hasJoined 请求（Query String 中包含角色名、IP 以及服务器唯一标识符），如果该用户已经加入了服务器（也就是判断数据库中有没有之前 join 时添加的记录），那就返回角色的完整 Profile，同时服务器允许用户进入。\n这也就是为什么客户端和服务端同样需要使用 authlib-injector hack 的原因，因为我们要确保两者请求的都是同一个 API，这样才能起到一个维护登录状态的功能。\n4.6 经常用到的 API 虽然 Yggdrasil 规范中定义了很多 API，但是其实日常游戏中用到的没几个，这里列举一些频繁使用的 API，也方便诸君知道哪里该认真开发哪里可以小小偷懒一下：\n1 2 3 4 5 6 7 8 9 10 # 初次登录时，用账号密码拿到 AccessToken POST /authserver/authenticate # 之后的登录都是直接用这个 API 签发新的令牌 POST /authserver/refresh # 加入服务器 POST /sessionserver/session/minecraft/join # 验证是否加入了服务器 GET /sessionserver/session/minecraft/hasJoined # 获取玩家完整 Profile GET /api/profiles/minecraft/{uuid} 其他 API 感觉都是几万年用不到一次的，很神秘。\n五、后记 上周折腾了好几天这玩意，写篇博文记录一下，既能理清自己的思路，还有可能帮到后来人~~（花时间研究了东西，却没人知道，多亏啊）~~，何乐而不为呢 :P\n5.1 参考链接 http://wiki.vg/Authentication http://wiki.vg/Protocol_Encryption#Authentication http://wiki.vg/Mojang_API https://github.com/to2mbn/authlib-injector/ https://zh.wikipedia.org/wiki/通用唯一识别码 php-rsa - 加密解密和签名 blessing-skin-plugins/yggdrasil-api 5.2 文章更新日志 具体的修改可以查看这篇博客在 GitHub 上源码的 历史提交记录。\n2018-02-22：\n基于最新的 authlib-injector 修改文章 将具体部署步骤移动至 yggdrasil-api 页面 同时也更新了 MCBBS 上的 相关帖子 ","date":"2022-02-10T00:00:00Z","image":"https://yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/715850d76b7db_hu6eb4a4db650f74d364d4c2b7c85999d6_577797_120x120_fill_box_smart1_3.png","permalink":"https://yurik.cafe/p/minecraft-yggdrasil-api-third-party-implementation/","title":"【转载】又是一种 Minecraft 外置登录解决方案：自行实现 Yggdrasil API"},{"content":"重新认识一下吧 从初一开始捣鼓自己的服务器，从一开始在一台废旧的办公电脑上安装Windows Server搭配Sakura Frp国外服务器的穿透来使自己的网站能够访问（那时候建站节点还没有收费），后来将系统装成了 CentOS 7，从此就一直泡在Linux系统里面了\n那时候 Sakura Frp 的节点对于我家的网络还不是特别的稳定，有一次一个月内换了好几个节点。（也有可能是移动网络的问题）\n后来接触了虚拟主机，陆陆续续换了几家主机商，可最终因为没钱而取消续费\n现在的博客的框架是 Hugo + Vercel，优势就是免费，并且我的文章在本地留有备份\n就这样吧。\n感谢你读到这里。\n你好，好久不见\n","date":"2022-02-10T00:00:00Z","permalink":"https://yurik.cafe/p/hello-world/","title":"你好，好久不见"}]